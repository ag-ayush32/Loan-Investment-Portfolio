{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loan investment in Lending Club Analysis\n",
    "\n",
    "\n",
    "\n",
    "Template of the project is in the CRISP-DM framework. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "##  Business Understanding and Data Understanding\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Business Understanding\n",
    "This initial phase focuses on understanding the project objectives and requirements from a business perspective.\n",
    "### Lending Club\n",
    "\n",
    "LendingClub is an American peer-to-peer lending company, headquartered in San Francisco, California. It is the world's largest peer-to-peer lending platform.\n",
    "\n",
    "LendingClub enables borrowers to create unsecured personal loans between \\\\$1,000 and \\\\$40,000. Investors can search and browse the loan listings on LendingClub website and select loans that they want to invest in based on the information supplied about the borrower, amount of loan, loan grade, and loan purpose, with the minimum investment of $25 per note. Investors make money from interest. LendingClub makes money by charging borrowers an origination fee and investors a service fee.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Understanding\n",
    "The data understanding phase starts with an initial data collection and proceeds with activities in order to get familiar with the data, to identify data quality problems, to discover first insights into the data, or to detect interesting subsets to form hypotheses for hidden information.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data File\n",
    "\n",
    "The data file **lending_club_2007_2011_6_states.csv** contains the loan and borrower information for loans initiated from 2007 to 2011 in six states, California, New York, Florida, Texas, New Jersey and Illinois.\n",
    "\n",
    "The data dictionary file **data_dictionary.csv** contains descriptions of all the columns in the data file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "#display all dataframe columns in df.head()\n",
    "pd.options.display.max_columns = None\n",
    "#display long string in datafame\n",
    "pd.options.display.max_colwidth = 300\n",
    "\n",
    "#filter out warning messages\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "###  Loading the Data Dictionary and the Data File\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Aayush\\Desktop\\python\\capstone\n"
     ]
    }
   ],
   "source": [
    "cd C:\\Users\\Aayush\\Desktop\\python\\capstone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ColumnName</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>acc_now_delinq</td>\n",
       "      <td>The number of accounts on which the borrower is now delinquent.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>addr_state</td>\n",
       "      <td>The state provided by the borrower in the loan application</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>annual_inc</td>\n",
       "      <td>The self-reported annual income provided by the borrower during registration.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>application_type</td>\n",
       "      <td>Indicates whether the loan is an individual application or a joint application with two co-borrowers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>chargeoff_within_12_mths</td>\n",
       "      <td>Number of charge-offs within 12 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>collection_recovery_fee</td>\n",
       "      <td>post charge off collection fee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>collections_12_mths_ex_med</td>\n",
       "      <td>Number of collections in 12 months excluding medical collections</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>debt_settlement_flag</td>\n",
       "      <td>Flags whether or not the borrower, who has charged-off, is working with a debt-settlement company.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>debt_settlement_flag_date</td>\n",
       "      <td>The most recent date that the Debt_Settlement_Flag has been set</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>delinq_2yrs</td>\n",
       "      <td>The number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>delinq_amnt</td>\n",
       "      <td>The past-due amount owed for the accounts on which the borrower is now delinquent.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>disbursement_method</td>\n",
       "      <td>The method by which the borrower receives their loan. Possible values are: CASH, DIRECT_PAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>dti</td>\n",
       "      <td>A ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower’s self-reported monthly income.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>earliest_cr_line</td>\n",
       "      <td>The month the borrower's earliest reported credit line was opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>emp_length</td>\n",
       "      <td>Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>emp_title</td>\n",
       "      <td>The job title supplied by the Borrower when applying for the loan.*</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>funded_amnt</td>\n",
       "      <td>The total amount committed to that loan at that point in time.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>funded_amnt_inv</td>\n",
       "      <td>The total amount committed by investors for that loan at that point in time.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>grade</td>\n",
       "      <td>LC assigned loan grade</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>hardship_flag</td>\n",
       "      <td>Flags whether or not the borrower is on a hardship plan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>home_ownership</td>\n",
       "      <td>The home ownership status provided by the borrower during registration or obtained from the credit report. Our values are: RENT, OWN, MORTGAGE, OTHER</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>initial_list_status</td>\n",
       "      <td>The initial listing status of the loan. Possible values are – W, F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>inq_last_6mths</td>\n",
       "      <td>The number of inquiries in past 6 months (excluding auto and mortgage inquiries)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>installment</td>\n",
       "      <td>The monthly payment owed by the borrower if the loan originates.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>int_rate</td>\n",
       "      <td>Interest Rate on the loan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>issue_d</td>\n",
       "      <td>The month which the loan was funded</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>last_credit_pull_d</td>\n",
       "      <td>The most recent month LC pulled credit for this loan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>last_pymnt_amnt</td>\n",
       "      <td>Last total payment amount received</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>last_pymnt_d</td>\n",
       "      <td>Last month payment was received</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>loan_amnt</td>\n",
       "      <td>The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>loan_status</td>\n",
       "      <td>Current status of the loan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>mths_since_last_delinq</td>\n",
       "      <td>The number of months since the borrower's last delinquency.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>mths_since_last_major_derog</td>\n",
       "      <td>Months since most recent 90-day or worse rating</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>mths_since_last_record</td>\n",
       "      <td>The number of months since the last public record.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>next_pymnt_d</td>\n",
       "      <td>Next scheduled payment date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>open_acc</td>\n",
       "      <td>The number of open credit lines in the borrower's credit file.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>out_prncp</td>\n",
       "      <td>Remaining outstanding principal for total amount funded</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>out_prncp_inv</td>\n",
       "      <td>Remaining outstanding principal for portion of total amount funded by investors</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>policy_code</td>\n",
       "      <td>publicly available policy_code=1\\nnew products not publicly available policy_code=2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>pub_rec</td>\n",
       "      <td>Number of derogatory public records</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>pub_rec_bankruptcies</td>\n",
       "      <td>Number of public record bankruptcies</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>purpose</td>\n",
       "      <td>A category provided by the borrower for the loan request.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>pymnt_plan</td>\n",
       "      <td>Indicates if a payment plan has been put in place for the loan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>recoveries</td>\n",
       "      <td>post charge off gross recovery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>revol_bal</td>\n",
       "      <td>Total credit revolving balance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>revol_util</td>\n",
       "      <td>Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>sub_grade</td>\n",
       "      <td>LC assigned loan subgrade</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>tax_liens</td>\n",
       "      <td>Number of tax liens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>term</td>\n",
       "      <td>The number of payments on the loan. Values are in months and can be either 36 or 60.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>title</td>\n",
       "      <td>The loan title provided by the borrower</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>total_acc</td>\n",
       "      <td>The total number of credit lines currently in the borrower's credit file</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>total_pymnt</td>\n",
       "      <td>Payments received to date for total amount funded</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>total_pymnt_inv</td>\n",
       "      <td>Payments received to date for portion of total amount funded by investors</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>total_rec_int</td>\n",
       "      <td>Interest received to date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>total_rec_late_fee</td>\n",
       "      <td>Late fees received to date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>total_rec_prncp</td>\n",
       "      <td>Principal received to date</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>verification_status</td>\n",
       "      <td>Indicates if income was verified by LC, not verified, or if the income source was verified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>zip_code</td>\n",
       "      <td>The first 3 numbers of the zip code provided by the borrower in the loan application.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     ColumnName  \\\n",
       "0                acc_now_delinq   \n",
       "1                    addr_state   \n",
       "2                    annual_inc   \n",
       "3              application_type   \n",
       "4      chargeoff_within_12_mths   \n",
       "5       collection_recovery_fee   \n",
       "6    collections_12_mths_ex_med   \n",
       "7          debt_settlement_flag   \n",
       "8     debt_settlement_flag_date   \n",
       "9                   delinq_2yrs   \n",
       "10                  delinq_amnt   \n",
       "11          disbursement_method   \n",
       "12                          dti   \n",
       "13             earliest_cr_line   \n",
       "14                   emp_length   \n",
       "15                    emp_title   \n",
       "16                  funded_amnt   \n",
       "17              funded_amnt_inv   \n",
       "18                        grade   \n",
       "19                hardship_flag   \n",
       "20               home_ownership   \n",
       "21          initial_list_status   \n",
       "22               inq_last_6mths   \n",
       "23                  installment   \n",
       "24                     int_rate   \n",
       "25                      issue_d   \n",
       "26           last_credit_pull_d   \n",
       "27              last_pymnt_amnt   \n",
       "28                 last_pymnt_d   \n",
       "29                    loan_amnt   \n",
       "30                  loan_status   \n",
       "31       mths_since_last_delinq   \n",
       "32  mths_since_last_major_derog   \n",
       "33       mths_since_last_record   \n",
       "34                 next_pymnt_d   \n",
       "35                     open_acc   \n",
       "36                    out_prncp   \n",
       "37                out_prncp_inv   \n",
       "38                  policy_code   \n",
       "39                      pub_rec   \n",
       "40         pub_rec_bankruptcies   \n",
       "41                      purpose   \n",
       "42                   pymnt_plan   \n",
       "43                   recoveries   \n",
       "44                    revol_bal   \n",
       "45                   revol_util   \n",
       "46                    sub_grade   \n",
       "47                    tax_liens   \n",
       "48                         term   \n",
       "49                        title   \n",
       "50                    total_acc   \n",
       "51                  total_pymnt   \n",
       "52              total_pymnt_inv   \n",
       "53                total_rec_int   \n",
       "54           total_rec_late_fee   \n",
       "55              total_rec_prncp   \n",
       "56          verification_status   \n",
       "57                     zip_code   \n",
       "\n",
       "                                                                                                                                                                                                 Description  \n",
       "0                                                                                                                                            The number of accounts on which the borrower is now delinquent.  \n",
       "1                                                                                                                                                 The state provided by the borrower in the loan application  \n",
       "2                                                                                                                              The self-reported annual income provided by the borrower during registration.  \n",
       "3                                                                                                       Indicates whether the loan is an individual application or a joint application with two co-borrowers  \n",
       "4                                                                                                                                                                     Number of charge-offs within 12 months  \n",
       "5                                                                                                                                                                             post charge off collection fee  \n",
       "6                                                                                                                                           Number of collections in 12 months excluding medical collections  \n",
       "7                                                                                                         Flags whether or not the borrower, who has charged-off, is working with a debt-settlement company.  \n",
       "8                                                                                                                                          The most recent date that the Debt_Settlement_Flag has been set    \n",
       "9                                                                                               The number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years  \n",
       "10                                                                                                                        The past-due amount owed for the accounts on which the borrower is now delinquent.  \n",
       "11                                                                                                               The method by which the borrower receives their loan. Possible values are: CASH, DIRECT_PAY  \n",
       "12  A ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower’s self-reported monthly income.  \n",
       "13                                                                                                                                         The month the borrower's earliest reported credit line was opened  \n",
       "14                                                                        Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.   \n",
       "15                                                                                                                                       The job title supplied by the Borrower when applying for the loan.*  \n",
       "16                                                                                                                                            The total amount committed to that loan at that point in time.  \n",
       "17                                                                                                                              The total amount committed by investors for that loan at that point in time.  \n",
       "18                                                                                                                                                                                    LC assigned loan grade  \n",
       "19                                                                                                                                                   Flags whether or not the borrower is on a hardship plan  \n",
       "20                                                     The home ownership status provided by the borrower during registration or obtained from the credit report. Our values are: RENT, OWN, MORTGAGE, OTHER  \n",
       "21                                                                                                                                        The initial listing status of the loan. Possible values are – W, F  \n",
       "22                                                                                                                          The number of inquiries in past 6 months (excluding auto and mortgage inquiries)  \n",
       "23                                                                                                                                          The monthly payment owed by the borrower if the loan originates.  \n",
       "24                                                                                                                                                                                 Interest Rate on the loan  \n",
       "25                                                                                                                                                                       The month which the loan was funded  \n",
       "26                                                                                                                                                      The most recent month LC pulled credit for this loan  \n",
       "27                                                                                                                                                                        Last total payment amount received  \n",
       "28                                                                                                                                                                           Last month payment was received  \n",
       "29                              The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.  \n",
       "30                                                                                                                                                                                Current status of the loan  \n",
       "31                                                                                                                                               The number of months since the borrower's last delinquency.  \n",
       "32                                                                                                                                                           Months since most recent 90-day or worse rating  \n",
       "33                                                                                                                                                        The number of months since the last public record.  \n",
       "34                                                                                                                                                                               Next scheduled payment date  \n",
       "35                                                                                                                                            The number of open credit lines in the borrower's credit file.  \n",
       "36                                                                                                                                                   Remaining outstanding principal for total amount funded  \n",
       "37                                                                                                                           Remaining outstanding principal for portion of total amount funded by investors  \n",
       "38                                                                                                                       publicly available policy_code=1\\nnew products not publicly available policy_code=2  \n",
       "39                                                                                                                                                                       Number of derogatory public records  \n",
       "40                                                                                                                                                                      Number of public record bankruptcies  \n",
       "41                                                                                                                                                A category provided by the borrower for the loan request.   \n",
       "42                                                                                                                                            Indicates if a payment plan has been put in place for the loan  \n",
       "43                                                                                                                                                                            post charge off gross recovery  \n",
       "44                                                                                                                                                                            Total credit revolving balance  \n",
       "45                                                                                Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.  \n",
       "46                                                                                                                                                                                 LC assigned loan subgrade  \n",
       "47                                                                                                                                                                                       Number of tax liens  \n",
       "48                                                                                                                      The number of payments on the loan. Values are in months and can be either 36 or 60.  \n",
       "49                                                                                                                                                                   The loan title provided by the borrower  \n",
       "50                                                                                                                                  The total number of credit lines currently in the borrower's credit file  \n",
       "51                                                                                                                                                         Payments received to date for total amount funded  \n",
       "52                                                                                                                                 Payments received to date for portion of total amount funded by investors  \n",
       "53                                                                                                                                                                                 Interest received to date  \n",
       "54                                                                                                                                                                                Late fees received to date  \n",
       "55                                                                                                                                                                                Principal received to date  \n",
       "56                                                                                                                Indicates if income was verified by LC, not verified, or if the income source was verified  \n",
       "57                                                                                                                     The first 3 numbers of the zip code provided by the borrower in the loan application.  "
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dict=pd.read_csv('data_dictionary.csv')\n",
    "data_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>funded_amnt_inv</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>verification_status</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>pymnt_plan</th>\n",
       "      <th>purpose</th>\n",
       "      <th>title</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>addr_state</th>\n",
       "      <th>dti</th>\n",
       "      <th>delinq_2yrs</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>inq_last_6mths</th>\n",
       "      <th>mths_since_last_delinq</th>\n",
       "      <th>mths_since_last_record</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_d</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>next_pymnt_d</th>\n",
       "      <th>last_credit_pull_d</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>mths_since_last_major_derog</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>chargeoff_within_12_mths</th>\n",
       "      <th>delinq_amnt</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>tax_liens</th>\n",
       "      <th>hardship_flag</th>\n",
       "      <th>disbursement_method</th>\n",
       "      <th>debt_settlement_flag</th>\n",
       "      <th>debt_settlement_flag_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2400</td>\n",
       "      <td>2400</td>\n",
       "      <td>2400.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>15.96</td>\n",
       "      <td>84.33</td>\n",
       "      <td>C</td>\n",
       "      <td>C5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>12252.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Dec-2011</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>n</td>\n",
       "      <td>small_business</td>\n",
       "      <td>real estate business</td>\n",
       "      <td>606xx</td>\n",
       "      <td>IL</td>\n",
       "      <td>8.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Nov-2001</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2956</td>\n",
       "      <td>98.5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3005.666844</td>\n",
       "      <td>3005.67</td>\n",
       "      <td>2400.00</td>\n",
       "      <td>605.67</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Jun-2014</td>\n",
       "      <td>649.91</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jun-2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000</td>\n",
       "      <td>10000</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.49</td>\n",
       "      <td>339.31</td>\n",
       "      <td>C</td>\n",
       "      <td>C1</td>\n",
       "      <td>AIR RESOURCES BOARD</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>49200.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2011</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>n</td>\n",
       "      <td>other</td>\n",
       "      <td>personel</td>\n",
       "      <td>917xx</td>\n",
       "      <td>CA</td>\n",
       "      <td>20.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-1996</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5598</td>\n",
       "      <td>21.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12231.890000</td>\n",
       "      <td>12231.89</td>\n",
       "      <td>10000.00</td>\n",
       "      <td>2214.92</td>\n",
       "      <td>16.97</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>357.48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Apr-2016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3000</td>\n",
       "      <td>3000</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>18.64</td>\n",
       "      <td>109.43</td>\n",
       "      <td>E</td>\n",
       "      <td>E1</td>\n",
       "      <td>MKC Accounting</td>\n",
       "      <td>9 years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>48000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2011</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>n</td>\n",
       "      <td>car</td>\n",
       "      <td>Car Downpayment</td>\n",
       "      <td>900xx</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Jan-2007</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8221</td>\n",
       "      <td>87.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3939.135294</td>\n",
       "      <td>3939.14</td>\n",
       "      <td>3000.00</td>\n",
       "      <td>939.14</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>111.34</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dec-2014</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5600</td>\n",
       "      <td>5600</td>\n",
       "      <td>5600.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>21.28</td>\n",
       "      <td>152.39</td>\n",
       "      <td>F</td>\n",
       "      <td>F2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4 years</td>\n",
       "      <td>OWN</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2011</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>n</td>\n",
       "      <td>small_business</td>\n",
       "      <td>Expand Business &amp; Buy Debt Portfolio</td>\n",
       "      <td>958xx</td>\n",
       "      <td>CA</td>\n",
       "      <td>5.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Apr-2004</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5210</td>\n",
       "      <td>32.6</td>\n",
       "      <td>13.0</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>647.500000</td>\n",
       "      <td>647.50</td>\n",
       "      <td>162.02</td>\n",
       "      <td>294.94</td>\n",
       "      <td>0.00</td>\n",
       "      <td>190.54</td>\n",
       "      <td>2.09</td>\n",
       "      <td>Apr-2012</td>\n",
       "      <td>152.39</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Oct-2016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5375</td>\n",
       "      <td>5375</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>12.69</td>\n",
       "      <td>121.45</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>Starbucks</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Dec-2011</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>n</td>\n",
       "      <td>other</td>\n",
       "      <td>Building my credit history.</td>\n",
       "      <td>774xx</td>\n",
       "      <td>TX</td>\n",
       "      <td>18.08</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Sep-2004</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9279</td>\n",
       "      <td>36.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1484.590000</td>\n",
       "      <td>1477.70</td>\n",
       "      <td>673.48</td>\n",
       "      <td>533.42</td>\n",
       "      <td>0.00</td>\n",
       "      <td>277.69</td>\n",
       "      <td>2.52</td>\n",
       "      <td>Nov-2012</td>\n",
       "      <td>121.45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dec-2016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_amnt  funded_amnt  funded_amnt_inv       term  int_rate  installment  \\\n",
       "0       2400         2400           2400.0  36 months     15.96        84.33   \n",
       "1      10000        10000          10000.0  36 months     13.49       339.31   \n",
       "2       3000         3000           3000.0  36 months     18.64       109.43   \n",
       "3       5600         5600           5600.0  60 months     21.28       152.39   \n",
       "4       5375         5375           5350.0  60 months     12.69       121.45   \n",
       "\n",
       "  grade sub_grade            emp_title emp_length home_ownership  annual_inc  \\\n",
       "0     C        C5                  NaN  10+ years           RENT     12252.0   \n",
       "1     C        C1  AIR RESOURCES BOARD  10+ years           RENT     49200.0   \n",
       "2     E        E1      MKC Accounting     9 years           RENT     48000.0   \n",
       "3     F        F2                  NaN    4 years            OWN     40000.0   \n",
       "4     B        B5            Starbucks   < 1 year           RENT     15000.0   \n",
       "\n",
       "  verification_status   issue_d  loan_status pymnt_plan         purpose  \\\n",
       "0        Not Verified  Dec-2011   Fully Paid          n  small_business   \n",
       "1     Source Verified  Dec-2011   Fully Paid          n           other   \n",
       "2     Source Verified  Dec-2011   Fully Paid          n             car   \n",
       "3     Source Verified  Dec-2011  Charged Off          n  small_business   \n",
       "4            Verified  Dec-2011  Charged Off          n           other   \n",
       "\n",
       "                                  title zip_code addr_state    dti  \\\n",
       "0                  real estate business    606xx         IL   8.72   \n",
       "1                              personel    917xx         CA  20.00   \n",
       "2                       Car Downpayment    900xx         CA   5.35   \n",
       "3  Expand Business & Buy Debt Portfolio    958xx         CA   5.55   \n",
       "4           Building my credit history.    774xx         TX  18.08   \n",
       "\n",
       "   delinq_2yrs earliest_cr_line  inq_last_6mths  mths_since_last_delinq  \\\n",
       "0          0.0         Nov-2001             2.0                     NaN   \n",
       "1          0.0         Feb-1996             1.0                    35.0   \n",
       "2          0.0         Jan-2007             2.0                     NaN   \n",
       "3          0.0         Apr-2004             2.0                     NaN   \n",
       "4          0.0         Sep-2004             0.0                     NaN   \n",
       "\n",
       "   mths_since_last_record  open_acc  pub_rec  revol_bal  revol_util  \\\n",
       "0                     NaN       2.0      0.0       2956        98.5   \n",
       "1                     NaN      10.0      0.0       5598        21.0   \n",
       "2                     NaN       4.0      0.0       8221        87.5   \n",
       "3                     NaN      11.0      0.0       5210        32.6   \n",
       "4                     NaN       2.0      0.0       9279        36.5   \n",
       "\n",
       "   total_acc initial_list_status  out_prncp  out_prncp_inv   total_pymnt  \\\n",
       "0       10.0                   f        0.0            0.0   3005.666844   \n",
       "1       37.0                   f        0.0            0.0  12231.890000   \n",
       "2        4.0                   f        0.0            0.0   3939.135294   \n",
       "3       13.0                   f        0.0            0.0    647.500000   \n",
       "4        3.0                   f        0.0            0.0   1484.590000   \n",
       "\n",
       "   total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  \\\n",
       "0          3005.67          2400.00         605.67                0.00   \n",
       "1         12231.89         10000.00        2214.92               16.97   \n",
       "2          3939.14          3000.00         939.14                0.00   \n",
       "3           647.50           162.02         294.94                0.00   \n",
       "4          1477.70           673.48         533.42                0.00   \n",
       "\n",
       "   recoveries  collection_recovery_fee last_pymnt_d  last_pymnt_amnt  \\\n",
       "0        0.00                     0.00     Jun-2014           649.91   \n",
       "1        0.00                     0.00     Jan-2015           357.48   \n",
       "2        0.00                     0.00     Jan-2015           111.34   \n",
       "3      190.54                     2.09     Apr-2012           152.39   \n",
       "4      277.69                     2.52     Nov-2012           121.45   \n",
       "\n",
       "   next_pymnt_d last_credit_pull_d  collections_12_mths_ex_med  \\\n",
       "0           NaN           Jun-2017                         0.0   \n",
       "1           NaN           Apr-2016                         0.0   \n",
       "2           NaN           Dec-2014                         0.0   \n",
       "3           NaN           Oct-2016                         0.0   \n",
       "4           NaN           Dec-2016                         0.0   \n",
       "\n",
       "   mths_since_last_major_derog  policy_code application_type  acc_now_delinq  \\\n",
       "0                          NaN            1       Individual             0.0   \n",
       "1                          NaN            1       Individual             0.0   \n",
       "2                          NaN            1       Individual             0.0   \n",
       "3                          NaN            1       Individual             0.0   \n",
       "4                          NaN            1       Individual             0.0   \n",
       "\n",
       "   chargeoff_within_12_mths  delinq_amnt  pub_rec_bankruptcies  tax_liens  \\\n",
       "0                       0.0          0.0                   0.0        0.0   \n",
       "1                       0.0          0.0                   0.0        0.0   \n",
       "2                       0.0          0.0                   0.0        0.0   \n",
       "3                       0.0          0.0                   0.0        0.0   \n",
       "4                       0.0          0.0                   0.0        0.0   \n",
       "\n",
       "  hardship_flag disbursement_method debt_settlement_flag  \\\n",
       "0             N                Cash                    N   \n",
       "1             N                Cash                    N   \n",
       "2             N                Cash                    N   \n",
       "3             N                Cash                    N   \n",
       "4             N                Cash                    N   \n",
       "\n",
       "  debt_settlement_flag_date  \n",
       "0                       NaN  \n",
       "1                       NaN  \n",
       "2                       NaN  \n",
       "3                       NaN  \n",
       "4                       NaN  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df = pd.read_csv('lending_club_2007_2011_6_states.csv')\n",
    "loan_df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19908 entries, 0 to 19907\n",
      "Data columns (total 58 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   loan_amnt                    19908 non-null  int64  \n",
      " 1   funded_amnt                  19908 non-null  int64  \n",
      " 2   funded_amnt_inv              19908 non-null  float64\n",
      " 3   term                         19908 non-null  object \n",
      " 4   int_rate                     19908 non-null  float64\n",
      " 5   installment                  19908 non-null  float64\n",
      " 6   grade                        19908 non-null  object \n",
      " 7   sub_grade                    19908 non-null  object \n",
      " 8   emp_title                    18723 non-null  object \n",
      " 9   emp_length                   19409 non-null  object \n",
      " 10  home_ownership               19908 non-null  object \n",
      " 11  annual_inc                   19908 non-null  float64\n",
      " 12  verification_status          19908 non-null  object \n",
      " 13  issue_d                      19908 non-null  object \n",
      " 14  loan_status                  19908 non-null  object \n",
      " 15  pymnt_plan                   19908 non-null  object \n",
      " 16  purpose                      19908 non-null  object \n",
      " 17  title                        19903 non-null  object \n",
      " 18  zip_code                     19908 non-null  object \n",
      " 19  addr_state                   19908 non-null  object \n",
      " 20  dti                          19908 non-null  float64\n",
      " 21  delinq_2yrs                  19908 non-null  float64\n",
      " 22  earliest_cr_line             19908 non-null  object \n",
      " 23  inq_last_6mths               19908 non-null  float64\n",
      " 24  mths_since_last_delinq       6998 non-null   float64\n",
      " 25  mths_since_last_record       1209 non-null   float64\n",
      " 26  open_acc                     19908 non-null  float64\n",
      " 27  pub_rec                      19908 non-null  float64\n",
      " 28  revol_bal                    19908 non-null  int64  \n",
      " 29  revol_util                   19889 non-null  float64\n",
      " 30  total_acc                    19908 non-null  float64\n",
      " 31  initial_list_status          19908 non-null  object \n",
      " 32  out_prncp                    19908 non-null  float64\n",
      " 33  out_prncp_inv                19908 non-null  float64\n",
      " 34  total_pymnt                  19908 non-null  float64\n",
      " 35  total_pymnt_inv              19908 non-null  float64\n",
      " 36  total_rec_prncp              19908 non-null  float64\n",
      " 37  total_rec_int                19908 non-null  float64\n",
      " 38  total_rec_late_fee           19908 non-null  float64\n",
      " 39  recoveries                   19908 non-null  float64\n",
      " 40  collection_recovery_fee      19908 non-null  float64\n",
      " 41  last_pymnt_d                 19865 non-null  object \n",
      " 42  last_pymnt_amnt              19908 non-null  float64\n",
      " 43  next_pymnt_d                 0 non-null      float64\n",
      " 44  last_credit_pull_d           19906 non-null  object \n",
      " 45  collections_12_mths_ex_med   19893 non-null  float64\n",
      " 46  mths_since_last_major_derog  0 non-null      float64\n",
      " 47  policy_code                  19908 non-null  int64  \n",
      " 48  application_type             19908 non-null  object \n",
      " 49  acc_now_delinq               19908 non-null  float64\n",
      " 50  chargeoff_within_12_mths     19893 non-null  float64\n",
      " 51  delinq_amnt                  19908 non-null  float64\n",
      " 52  pub_rec_bankruptcies         19595 non-null  float64\n",
      " 53  tax_liens                    19898 non-null  float64\n",
      " 54  hardship_flag                19908 non-null  object \n",
      " 55  disbursement_method          19908 non-null  object \n",
      " 56  debt_settlement_flag         19908 non-null  object \n",
      " 57  debt_settlement_flag_date    82 non-null     object \n",
      "dtypes: float64(31), int64(4), object(23)\n",
      "memory usage: 8.8+ MB\n"
     ]
    }
   ],
   "source": [
    "loan_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt                          0\n",
       "funded_amnt                        0\n",
       "funded_amnt_inv                    0\n",
       "term                               0\n",
       "int_rate                           0\n",
       "installment                        0\n",
       "grade                              0\n",
       "sub_grade                          0\n",
       "emp_title                       1185\n",
       "emp_length                       499\n",
       "home_ownership                     0\n",
       "annual_inc                         0\n",
       "verification_status                0\n",
       "issue_d                            0\n",
       "loan_status                        0\n",
       "pymnt_plan                         0\n",
       "purpose                            0\n",
       "title                              5\n",
       "zip_code                           0\n",
       "addr_state                         0\n",
       "dti                                0\n",
       "delinq_2yrs                        0\n",
       "earliest_cr_line                   0\n",
       "inq_last_6mths                     0\n",
       "mths_since_last_delinq         12910\n",
       "mths_since_last_record         18699\n",
       "open_acc                           0\n",
       "pub_rec                            0\n",
       "revol_bal                          0\n",
       "revol_util                        19\n",
       "total_acc                          0\n",
       "initial_list_status                0\n",
       "out_prncp                          0\n",
       "out_prncp_inv                      0\n",
       "total_pymnt                        0\n",
       "total_pymnt_inv                    0\n",
       "total_rec_prncp                    0\n",
       "total_rec_int                      0\n",
       "total_rec_late_fee                 0\n",
       "recoveries                         0\n",
       "collection_recovery_fee            0\n",
       "last_pymnt_d                      43\n",
       "last_pymnt_amnt                    0\n",
       "next_pymnt_d                   19908\n",
       "last_credit_pull_d                 2\n",
       "collections_12_mths_ex_med        15\n",
       "mths_since_last_major_derog    19908\n",
       "policy_code                        0\n",
       "application_type                   0\n",
       "acc_now_delinq                     0\n",
       "chargeoff_within_12_mths          15\n",
       "delinq_amnt                        0\n",
       "pub_rec_bankruptcies             313\n",
       "tax_liens                         10\n",
       "hardship_flag                      0\n",
       "disbursement_method                0\n",
       "debt_settlement_flag               0\n",
       "debt_settlement_flag_date      19826\n",
       "dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>funded_amnt_inv</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>delinq_2yrs</th>\n",
       "      <th>inq_last_6mths</th>\n",
       "      <th>mths_since_last_delinq</th>\n",
       "      <th>mths_since_last_record</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>next_pymnt_d</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>mths_since_last_major_derog</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>chargeoff_within_12_mths</th>\n",
       "      <th>delinq_amnt</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>tax_liens</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>1.990800e+04</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>6998.000000</td>\n",
       "      <td>1209.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19889.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.0</td>\n",
       "      <td>19908.0</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>19908.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19893.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19908.0</td>\n",
       "      <td>19908.0</td>\n",
       "      <td>19893.0</td>\n",
       "      <td>19908.0</td>\n",
       "      <td>19595.000000</td>\n",
       "      <td>19898.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>11353.846444</td>\n",
       "      <td>11065.763763</td>\n",
       "      <td>10500.929748</td>\n",
       "      <td>12.089717</td>\n",
       "      <td>330.614254</td>\n",
       "      <td>7.107345e+04</td>\n",
       "      <td>13.008619</td>\n",
       "      <td>0.143962</td>\n",
       "      <td>0.829466</td>\n",
       "      <td>35.841097</td>\n",
       "      <td>69.354839</td>\n",
       "      <td>9.278782</td>\n",
       "      <td>0.046715</td>\n",
       "      <td>13363.994826</td>\n",
       "      <td>49.424966</td>\n",
       "      <td>21.527627</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12286.852391</td>\n",
       "      <td>11690.155107</td>\n",
       "      <td>9913.519990</td>\n",
       "      <td>2277.120129</td>\n",
       "      <td>1.489973</td>\n",
       "      <td>94.722382</td>\n",
       "      <td>11.861625</td>\n",
       "      <td>2636.253711</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.037969</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7463.700492</td>\n",
       "      <td>7176.276661</td>\n",
       "      <td>7106.229650</td>\n",
       "      <td>3.698287</td>\n",
       "      <td>210.557434</td>\n",
       "      <td>6.980565e+04</td>\n",
       "      <td>6.663658</td>\n",
       "      <td>0.489576</td>\n",
       "      <td>1.044978</td>\n",
       "      <td>21.599170</td>\n",
       "      <td>44.520279</td>\n",
       "      <td>4.414903</td>\n",
       "      <td>0.217827</td>\n",
       "      <td>15943.303849</td>\n",
       "      <td>28.198395</td>\n",
       "      <td>11.269006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9098.847567</td>\n",
       "      <td>8984.722396</td>\n",
       "      <td>7126.424699</td>\n",
       "      <td>2583.733214</td>\n",
       "      <td>7.964257</td>\n",
       "      <td>666.434583</td>\n",
       "      <td>141.910324</td>\n",
       "      <td>4412.964304</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.191393</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.420000</td>\n",
       "      <td>15.690000</td>\n",
       "      <td>4.000000e+03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5750.000000</td>\n",
       "      <td>5600.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>9.450000</td>\n",
       "      <td>171.287500</td>\n",
       "      <td>4.200000e+04</td>\n",
       "      <td>7.840000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3770.500000</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5670.592545</td>\n",
       "      <td>5239.857500</td>\n",
       "      <td>4800.000000</td>\n",
       "      <td>687.595000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>222.530000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>9000.000000</td>\n",
       "      <td>11.860000</td>\n",
       "      <td>285.780000</td>\n",
       "      <td>6.000000e+04</td>\n",
       "      <td>13.075000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8876.500000</td>\n",
       "      <td>50.300000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10042.735817</td>\n",
       "      <td>9427.845000</td>\n",
       "      <td>8000.000000</td>\n",
       "      <td>1389.230000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>544.700000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>15000.000000</td>\n",
       "      <td>15000.000000</td>\n",
       "      <td>14500.000000</td>\n",
       "      <td>14.610000</td>\n",
       "      <td>440.815000</td>\n",
       "      <td>8.500000e+04</td>\n",
       "      <td>18.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>104.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16952.250000</td>\n",
       "      <td>72.800000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16681.688450</td>\n",
       "      <td>15983.440000</td>\n",
       "      <td>14000.000000</td>\n",
       "      <td>2842.795000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3193.352500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>35000.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "      <td>24.400000</td>\n",
       "      <td>1302.690000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>29.990000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>129.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>148829.000000</td>\n",
       "      <td>99.900000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>58480.139915</td>\n",
       "      <td>58438.370000</td>\n",
       "      <td>35000.020000</td>\n",
       "      <td>23480.140000</td>\n",
       "      <td>180.200000</td>\n",
       "      <td>29623.350000</td>\n",
       "      <td>6543.040000</td>\n",
       "      <td>35596.410000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          loan_amnt   funded_amnt  funded_amnt_inv      int_rate  \\\n",
       "count  19908.000000  19908.000000     19908.000000  19908.000000   \n",
       "mean   11353.846444  11065.763763     10500.929748     12.089717   \n",
       "std     7463.700492   7176.276661      7106.229650      3.698287   \n",
       "min      500.000000    500.000000         0.000000      5.420000   \n",
       "25%     5750.000000   5600.000000      5000.000000      9.450000   \n",
       "50%    10000.000000  10000.000000      9000.000000     11.860000   \n",
       "75%    15000.000000  15000.000000     14500.000000     14.610000   \n",
       "max    35000.000000  35000.000000     35000.000000     24.400000   \n",
       "\n",
       "        installment    annual_inc           dti   delinq_2yrs  inq_last_6mths  \\\n",
       "count  19908.000000  1.990800e+04  19908.000000  19908.000000    19908.000000   \n",
       "mean     330.614254  7.107345e+04     13.008619      0.143962        0.829466   \n",
       "std      210.557434  6.980565e+04      6.663658      0.489576        1.044978   \n",
       "min       15.690000  4.000000e+03      0.000000      0.000000        0.000000   \n",
       "25%      171.287500  4.200000e+04      7.840000      0.000000        0.000000   \n",
       "50%      285.780000  6.000000e+04     13.075000      0.000000        0.000000   \n",
       "75%      440.815000  8.500000e+04     18.200000      0.000000        1.000000   \n",
       "max     1302.690000  6.000000e+06     29.990000     11.000000        8.000000   \n",
       "\n",
       "       mths_since_last_delinq  mths_since_last_record      open_acc  \\\n",
       "count             6998.000000             1209.000000  19908.000000   \n",
       "mean                35.841097               69.354839      9.278782   \n",
       "std                 21.599170               44.520279      4.414903   \n",
       "min                  0.000000                0.000000      2.000000   \n",
       "25%                 19.000000                0.000000      6.000000   \n",
       "50%                 34.000000               90.000000      9.000000   \n",
       "75%                 51.000000              104.000000     12.000000   \n",
       "max                106.000000              129.000000     44.000000   \n",
       "\n",
       "            pub_rec      revol_bal    revol_util     total_acc  out_prncp  \\\n",
       "count  19908.000000   19908.000000  19889.000000  19908.000000    19908.0   \n",
       "mean       0.046715   13363.994826     49.424966     21.527627        0.0   \n",
       "std        0.217827   15943.303849     28.198395     11.269006        0.0   \n",
       "min        0.000000       0.000000      0.000000      2.000000        0.0   \n",
       "25%        0.000000    3770.500000     26.500000     13.000000        0.0   \n",
       "50%        0.000000    8876.500000     50.300000     20.000000        0.0   \n",
       "75%        0.000000   16952.250000     72.800000     28.000000        0.0   \n",
       "max        3.000000  148829.000000     99.900000     90.000000        0.0   \n",
       "\n",
       "       out_prncp_inv   total_pymnt  total_pymnt_inv  total_rec_prncp  \\\n",
       "count        19908.0  19908.000000     19908.000000     19908.000000   \n",
       "mean             0.0  12286.852391     11690.155107      9913.519990   \n",
       "std              0.0   9098.847567      8984.722396      7126.424699   \n",
       "min              0.0      0.000000         0.000000         0.000000   \n",
       "25%              0.0   5670.592545      5239.857500      4800.000000   \n",
       "50%              0.0  10042.735817      9427.845000      8000.000000   \n",
       "75%              0.0  16681.688450     15983.440000     14000.000000   \n",
       "max              0.0  58480.139915     58438.370000     35000.020000   \n",
       "\n",
       "       total_rec_int  total_rec_late_fee    recoveries  \\\n",
       "count   19908.000000        19908.000000  19908.000000   \n",
       "mean     2277.120129            1.489973     94.722382   \n",
       "std      2583.733214            7.964257    666.434583   \n",
       "min         0.000000            0.000000      0.000000   \n",
       "25%       687.595000            0.000000      0.000000   \n",
       "50%      1389.230000            0.000000      0.000000   \n",
       "75%      2842.795000            0.000000      0.000000   \n",
       "max     23480.140000          180.200000  29623.350000   \n",
       "\n",
       "       collection_recovery_fee  last_pymnt_amnt  next_pymnt_d  \\\n",
       "count             19908.000000     19908.000000           0.0   \n",
       "mean                 11.861625      2636.253711           NaN   \n",
       "std                 141.910324      4412.964304           NaN   \n",
       "min                   0.000000         0.000000           NaN   \n",
       "25%                   0.000000       222.530000           NaN   \n",
       "50%                   0.000000       544.700000           NaN   \n",
       "75%                   0.000000      3193.352500           NaN   \n",
       "max                6543.040000     35596.410000           NaN   \n",
       "\n",
       "       collections_12_mths_ex_med  mths_since_last_major_derog  policy_code  \\\n",
       "count                     19893.0                          0.0      19908.0   \n",
       "mean                          0.0                          NaN          1.0   \n",
       "std                           0.0                          NaN          0.0   \n",
       "min                           0.0                          NaN          1.0   \n",
       "25%                           0.0                          NaN          1.0   \n",
       "50%                           0.0                          NaN          1.0   \n",
       "75%                           0.0                          NaN          1.0   \n",
       "max                           0.0                          NaN          1.0   \n",
       "\n",
       "       acc_now_delinq  chargeoff_within_12_mths  delinq_amnt  \\\n",
       "count         19908.0                   19893.0      19908.0   \n",
       "mean              0.0                       0.0          0.0   \n",
       "std               0.0                       0.0          0.0   \n",
       "min               0.0                       0.0          0.0   \n",
       "25%               0.0                       0.0          0.0   \n",
       "50%               0.0                       0.0          0.0   \n",
       "75%               0.0                       0.0          0.0   \n",
       "max               0.0                       0.0          0.0   \n",
       "\n",
       "       pub_rec_bankruptcies  tax_liens  \n",
       "count          19595.000000    19898.0  \n",
       "mean               0.037969        0.0  \n",
       "std                0.191393        0.0  \n",
       "min                0.000000        0.0  \n",
       "25%                0.000000        0.0  \n",
       "50%                0.000000        0.0  \n",
       "75%                0.000000        0.0  \n",
       "max                2.000000        0.0  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis - EDA\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Term and Interest Rate\n",
    "\n",
    "\n",
    "\n",
    "With the help of following code cells, we find out that:\n",
    "- There are two different terms, 36 months and 60 months.\n",
    "- There are about three times more 36 months loans than 60 months loans in the dataset.\n",
    "- Interest rate is in the range of 5% to 25%. Majority of loans have interest rate between 5-17%.\n",
    "- 36 months loans have significant lower average interest rate than that of 60 months loans."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Loan Term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['36 months', '60 months'], dtype=object)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get unique values in the term feature\n",
    "loan_df.term.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36 months    14852\n",
       "60 months     5056\n",
       "Name: term, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get counts of each term\n",
    "loan_df.term.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Loan Term')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.countplot('term',data=loan_df, order=sorted(loan_df.term.unique()))\n",
    "ax.set_title('Loan Term')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Interest Rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27f5b8edbe0>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loan_df.int_rate.hist(edgecolor='black', alpha=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Average Interest Rate of Different Terms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>int_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>term</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>36 months</th>\n",
       "      <td>11.121125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60 months</th>\n",
       "      <td>14.934955</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            int_rate\n",
       "term                \n",
       "36 months  11.121125\n",
       "60 months  14.934955"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('term').agg({'int_rate':'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Interest Rate')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = loan_df.groupby('term').agg({'int_rate':'mean'}).plot.bar(legend = False)\n",
    "ax.set_title('Loan Term and Interest Rate')\n",
    "ax.set_xlabel('Loan Term')\n",
    "ax.set_ylabel('Interest Rate')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Grade\n",
    "\n",
    "\n",
    "- grade is a categorical feature.\n",
    "- A Seaborn countplot is a good way to visualize categorical features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['C', 'E', 'F', 'B', 'A', 'D', 'G'], dtype=object)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.grade.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "B    6065\n",
       "A    4875\n",
       "C    4087\n",
       "D    2748\n",
       "E    1434\n",
       "F     540\n",
       "G     159\n",
       "Name: grade, dtype: int64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.grade.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grd= sns.countplot(\"grade\",data=loan_df,order=sorted(loan_df.grade.unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Grade and Interest Rate\n",
    "\n",
    "\n",
    " - Group by grade column.\n",
    " - aggregate function mean on int_rate column.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>int_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>7.350978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>11.033439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>13.555241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>15.707576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>17.653752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>19.729463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>21.346981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        int_rate\n",
       "grade           \n",
       "A       7.350978\n",
       "B      11.033439\n",
       "C      13.555241\n",
       "D      15.707576\n",
       "E      17.653752\n",
       "F      19.729463\n",
       "G      21.346981"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('grade').agg({'int_rate':'mean'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Interest Rate')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gi=loan_df.groupby('grade').agg({'int_rate':'mean'}).plot.bar(legend = False)\n",
    "gi.set_title('Grade and Interest Rate')\n",
    "gi.set_xlabel('Grade')\n",
    "gi.set_ylabel('Interest Rate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "### interest rate increases with grade in a linear fashion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Loan by State\n",
    "\n",
    "There are loans from six States in the dataset. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['IL', 'CA', 'TX', 'FL', 'NY', 'NJ'], dtype=object)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.addr_state.unique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CA    7105\n",
       "NY    3817\n",
       "FL    2872\n",
       "TX    2734\n",
       "NJ    1855\n",
       "IL    1525\n",
       "Name: addr_state, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.addr_state.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "si=loan_df.addr_state.value_counts().plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "si=sns.countplot('addr_state',data=loan_df,order=loan_df.addr_state.value_counts().index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Borrowers Annual Income Distribution\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2996"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z=loan_df.annual_inc.unique()\n",
    "len(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1.600e+01, 2.660e+02, 7.930e+02, 1.487e+03, 2.167e+03, 2.098e+03,\n",
       "        2.467e+03, 2.285e+03, 1.463e+03, 1.473e+03, 8.960e+02, 9.510e+02,\n",
       "        8.050e+02, 4.000e+02, 5.470e+02, 3.650e+02, 1.580e+02, 1.860e+02,\n",
       "        2.310e+02, 1.290e+02, 9.100e+01, 7.300e+01, 1.010e+02, 5.300e+01,\n",
       "        9.200e+01, 2.000e+01, 2.000e+01, 2.600e+01, 2.500e+01, 2.100e+01,\n",
       "        3.600e+01, 9.000e+00, 3.000e+00, 1.400e+01, 9.000e+00, 8.000e+00,\n",
       "        3.100e+01, 5.000e+00, 4.000e+00, 9.000e+00, 3.000e+00, 1.000e+00,\n",
       "        4.000e+00, 1.000e+00, 4.000e+00, 4.000e+00, 1.000e+00, 3.000e+00,\n",
       "        7.000e+00]),\n",
       " array([     0.        ,   8163.26530612,  16326.53061224,  24489.79591837,\n",
       "         32653.06122449,  40816.32653061,  48979.59183673,  57142.85714286,\n",
       "         65306.12244898,  73469.3877551 ,  81632.65306122,  89795.91836735,\n",
       "         97959.18367347, 106122.44897959, 114285.71428571, 122448.97959184,\n",
       "        130612.24489796, 138775.51020408, 146938.7755102 , 155102.04081633,\n",
       "        163265.30612245, 171428.57142857, 179591.83673469, 187755.10204082,\n",
       "        195918.36734694, 204081.63265306, 212244.89795918, 220408.16326531,\n",
       "        228571.42857143, 236734.69387755, 244897.95918367, 253061.2244898 ,\n",
       "        261224.48979592, 269387.75510204, 277551.02040816, 285714.28571429,\n",
       "        293877.55102041, 302040.81632653, 310204.08163265, 318367.34693878,\n",
       "        326530.6122449 , 334693.87755102, 342857.14285714, 351020.40816327,\n",
       "        359183.67346939, 367346.93877551, 375510.20408163, 383673.46938776,\n",
       "        391836.73469388, 400000.        ]),\n",
       " <a list of 49 Patch objects>)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYEAAAD4CAYAAAAKA1qZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATRklEQVR4nO3df6zddX3H8ed7hSET2IotUNtmBVeXQbOh3FQMi2GajUqsYDKXkihkllRYCbq5EMBsQJYSxyYy3GBWJMAm1i5qACNTRlycgVEucEdvwUoFJte2tJ3b5A8Ca33vj/MBTnvPufee++N8b+/n+UhOzve8z/d7vu/zbc953fP5fs/3RGYiSarTLzTdgCSpOYaAJFXMEJCkihkCklQxQ0CSKnZE0w2MZ8GCBbls2bKm25Ckw8pjjz22LzMXjjffrA+BZcuWMTg42HQbknRYiYj/nMh8DgdJUsUMAUmqmCEgSRUbNwQiYmlEfDcino6IbRHxiVK/NiJ+EhFD5XJu2zJXRcSOiNgeEee01c+IiK3lvpsjImbmaUmSJmIiO4b3A5/KzMcj4ljgsYh4oNz3ucz86/aZI+JUYA1wGvBW4F8i4u2ZeQC4FVgH/DvwLWAVcP/0PBVJUq/G/SSQmbsy8/Ey/RLwNLB4jEXOAzZl5iuZ+RywA1gZEYuA4zLz4Wydte4u4PwpPwNJ0qT1tE8gIpYB7wAeKaXLIuLJiLg9IuaX2mLghbbFRkptcZk+tN5pPesiYjAiBvfu3dtLi5KkHkw4BCLiGOBrwCcz82e0hnbeBpwO7AI++9qsHRbPMeqji5kbM3MgMwcWLhz3uw6SpEmaUAhExJG0AuDLmfl1gMx8MTMPZObPgS8CK8vsI8DStsWXADtLfUmHuiSpIePuGC5H8HwJeDozb2yrL8rMXeXmh4DhMn0vcHdE3Ehrx/ByYEtmHoiIlyLiTFrDSRcCn5++p3J4uOb6GxjZvW9UfclJC7ju6isa6EhSzSZydNBZwEeBrRExVGpXAxdExOm0hnSeBz4OkJnbImIz8BStI4vWlyODAC4F7gCOpnVUUHVHBo3s3seK1RePqg/fd1sD3Uiq3bghkJnfp/N4/rfGWGYDsKFDfRBY0UuDkqSZ4zeGJalihoAkVcwQkKSKGQKSVDFDQJIqZghIUsUMAUmqmCEgSRUzBCSpYoaAJFXMEJCkihkCklSxiZxFVH3wxNAQay/vfCppTzMtaaYYArPEy6/u73iKafA005JmjsNBklQxQ0CSKmYISFLFDAFJqpghIEkVMwQkqWKGgCRVzBCQpIr5ZbEpuub6GxjZvW9U3W/5SjocGAJTNLJ7X8dv+votX0mHA4eDJKlihoAkVcwQkKSKGQKSVDF3DM+Qbr8PMLR1mBWrG2hIkjowBGZIt98HeGjLJQ10I0mdORwkSRUzBCSpYoaAJFVs3BCIiKUR8d2IeDoitkXEJ0r9+Ih4ICKeKdfz25a5KiJ2RMT2iDinrX5GRGwt990cETEzT0uSNBET+SSwH/hUZv4GcCawPiJOBa4EHszM5cCD5TblvjXAacAq4JaImFce61ZgHbC8XFZN43ORJPVo3BDIzF2Z+XiZfgl4GlgMnAfcWWa7Ezi/TJ8HbMrMVzLzOWAHsDIiFgHHZebDmZnAXW3LSJIa0NM+gYhYBrwDeAQ4MTN3QSsogBPKbIuBF9oWGym1xWX60Hqn9ayLiMGIGNy7d28vLUqSejDhEIiIY4CvAZ/MzJ+NNWuHWo5RH13M3JiZA5k5sHDhwom2KEnq0YRCICKOpBUAX87Mr5fyi2WIh3K9p9RHgKVtiy8Bdpb6kg51SVJDJnJ0UABfAp7OzBvb7roXuKhMXwTc01ZfExFHRcTJtHYAbylDRi9FxJnlMS9sW0aS1ICJnDbiLOCjwNaIGCq1q4HPAJsjYi3wY+DDAJm5LSI2A0/ROrJofWYeKMtdCtwBHA3cXy6SpIaMGwKZ+X06j+cDvK/LMhuADR3qg8CKXhqUJM0cvzEsSRUzBCSpYoaAJFXMEJCkihkCklQxQ0CSKmYISFLFDAFJqpghIEkVMwQkqWKGgCRVzBCQpIoZApJUMUNAkipmCEhSxQwBSaqYISBJFTMEJKlihoAkVcwQkKSKGQKSVDFDQJIqZghIUsUMAUmqmCEgSRUzBCSpYoaAJFXMEJCkihkCklQxQ0CSKmYISFLFDAFJqpghIEkVGzcEIuL2iNgTEcNttWsj4icRMVQu57bdd1VE7IiI7RFxTlv9jIjYWu67OSJi+p+OJKkXE/kkcAewqkP9c5l5erl8CyAiTgXWAKeVZW6JiHll/luBdcDycun0mJKkPho3BDLze8BPJ/h45wGbMvOVzHwO2AGsjIhFwHGZ+XBmJnAXcP5km5YkTY+p7BO4LCKeLMNF80ttMfBC2zwjpba4TB9a7ygi1kXEYEQM7t27dwotSpLGcsQkl7sV+Asgy/VngY8Bncb5c4x6R5m5EdgIMDAw0HW+frrm+hsY2b1vVH1o6zArVjfQkCRNg0mFQGa++Np0RHwR+Ga5OQIsbZt1CbCz1Jd0qB82RnbvY8Xqi0fVH9pySQPdtHQLpiUnLeC6q69ooCNJh5tJhUBELMrMXeXmh4DXjhy6F7g7Im4E3kprB/CWzDwQES9FxJnAI8CFwOen1no9nhgaYu3lo9/Uh7YO85GrbxpVH77vtn60JWkOGDcEIuIrwNnAgogYAa4Bzo6I02kN6TwPfBwgM7dFxGbgKWA/sD4zD5SHupTWkUZHA/eXiybg5Vf3z7pPIZLmhnFDIDMv6FD+0hjzbwA2dKgPAit66k6SNKP8xrAkVcwQkKSKGQKSVDFDQJIqZghIUsUMAUmqmCEgSRUzBCSpYoaAJFXMEJCkihkCklQxQ0CSKmYISFLFDAFJqpghIEkVMwQkqWKGgCRVzBCQpIoZApJUMUNAkipmCEhSxQwBSaqYISBJFTMEJKlihoAkVcwQkKSKGQKSVDFDQJIqZghIUsUMAUmqmCEgSRUzBCSpYoaAJFVs3BCIiNsjYk9EDLfVjo+IByLimXI9v+2+qyJiR0Rsj4hz2upnRMTWct/NERHT/3QkSb2YyCeBO4BVh9SuBB7MzOXAg+U2EXEqsAY4rSxzS0TMK8vcCqwDlpfLoY8pSeqzcUMgM78H/PSQ8nnAnWX6TuD8tvqmzHwlM58DdgArI2IRcFxmPpyZCdzVtowkqSGT3SdwYmbuAijXJ5T6YuCFtvlGSm1xmT603lFErIuIwYgY3Lt37yRblCSNZ7p3DHca588x6h1l5sbMHMjMgYULF05bc5Kkg002BF4sQzyU6z2lPgIsbZtvCbCz1Jd0qEuSGjTZELgXuKhMXwTc01ZfExFHRcTJtHYAbylDRi9FxJnlqKAL25aRJDXkiPFmiIivAGcDCyJiBLgG+AywOSLWAj8GPgyQmdsiYjPwFLAfWJ+ZB8pDXUrrSKOjgfvLRX10zfU3MLJ736j6kpMWcN3VVzTQkaSmjRsCmXlBl7ve12X+DcCGDvVBYEVP3Wlajezex4rVF4+qD993WwPdSJoN/MawJFXMEJCkihkCklSxcfcJ6PDzxNAQay8fvaN3aOswK1Y30JCkWcsQmINefnV/xx3AD225pIFuJM1mDgdJUsUMAUmqmCEgSRUzBCSpYoaAJFXMo4PU9ZBS8LxC0lxnCLTpdoI1mNvH2Hc7pBQ8r5A01xkCbbqdYA08xl7S3OQ+AUmqmCEgSRUzBCSpYoaAJFXMEJCkihkCklQxQ0CSKmYISFLFDAFJqpghIEkVMwQkqWKGgCRVzBCQpIoZApJUMUNAkipmCEhSxQwBSaqYISBJFTMEJKli/sawJuWa629gZPe+UfUlJy3guquvaKAjSZMxpRCIiOeBl4ADwP7MHIiI44GvAsuA54E/yMz/LvNfBawt81+emd+eyvrVnJHd+1ix+uJR9eH7bmugG0mTNR3DQb+Tmadn5kC5fSXwYGYuBx4st4mIU4E1wGnAKuCWiJg3DeuXJE3STOwTOA+4s0zfCZzfVt+Uma9k5nPADmDlDKxfkjRBUw2BBL4TEY9FxLpSOzEzdwGU6xNKfTHwQtuyI6U2SkSsi4jBiBjcu3fvFFuUJHUz1R3DZ2Xmzog4AXggIn4wxrzRoZadZszMjcBGgIGBgY7zSJKmbkqfBDJzZ7neA3yD1vDOixGxCKBc7ymzjwBL2xZfAuycyvolSVMz6RCIiDdHxLGvTQO/BwwD9wIXldkuAu4p0/cCayLiqIg4GVgObJns+iVJUzeV4aATgW9ExGuPc3dm/nNEPApsjoi1wI+BDwNk5raI2Aw8BewH1mfmgSl1L0makkmHQGY+C/xWh/p/Ae/rsswGYMNk1ylJml6eNkKSKmYISFLFPHeQxvTE0BBrLx99LqChrcOsWN1AQ5KmlSGgMb386v6O5wh6aMslDXQjabo5HCRJFfOTgKZVt+EjTzEtzU6GgKZVt+EjTzEtzU4OB0lSxQwBSaqYISBJFTMEJKlihoAkVcwQkKSKVXmI6DXX38DI7n2j6p4KQVJtqgyBkd37PBWCJOFwkCRVrcpPAjo8dBu28xQU0vQxBDRrdRu28xQU0vRxOEiSKmYISFLFHA5S4zxkV2qOIaDGeciu1ByHgySpYn4SUF90+8UxcNhHapIhoL7o9otj4LCP1CRDQIcdf8dYmj6GgA47/o6xNH0MAVXNU1OodoaA5ozJDBP1emoKQ0NzjSGgOaMfw0Sez0hzjSGgOc/DU6XuDAHNeZM5PLVbcBgammsMAamDbsHhdxo01/Q9BCJiFfA3wDzgtsz8TL97kOaS2bqzerb2pYP1NQQiYh7wd8DvAiPAoxFxb2Y+NRPr8+yU6pduw0fP7vghp/za2zsu0+2+XutDW4f5yNU3jao3vbPaneiHh35/ElgJ7MjMZwEiYhNwHjAjIeDZKdUvXYeP/uwSPthtf0SX+3qu97hfA7r/Nd7tD6degwm6/7HVa2B2q0/mE0Wvn0563R6T6avpT0yRmTO+ktdXFvH7wKrMvLjc/ijwrsy87JD51gHrys1fB7ZPcpULgNFbt3n21Rv76o199Wau9vWrmblwvJn6/UkgOtRGpVBmbgQ2TnllEYOZOTDVx5lu9tUb++qNffWm9r76/XsCI8DStttLgJ197kGSVPQ7BB4FlkfEyRHxi8Aa4N4+9yBJKvo6HJSZ+yPiMuDbtA4RvT0zt83gKqc8pDRD7Ks39tUb++pN1X31dcewJGl28TeGJalihoAk1Swz59wFWEXruwU7gCtncD3PA1uBIWCw1I4HHgCeKdfz2+a/qvS0HTinrX5GeZwdwM28MUx3FPDVUn8EWNalj9uBPcBwW60vfQAXlXU8A1w0gb6uBX5SttkQcG4DfS0Fvgs8DWwDPjEbttkYfTW6zYA3AVuA/yh9XTdLtle3vhrdXm33zwOeAL45G7ZX1/exmXqDbOpSNvyPgFOAXyz/QU6doXU9Dyw4pHYDJXiAK4G/LNOnll6OAk4uPc4r920B3k3rexT3A+8v9T8C/r5MrwG+2qWP9wDv5OA32xnvo/ynfrZczy/T88fp61rgTzs8h372tQh4Z5k+FvhhWX+j22yMvhrdZuUxjinTR9J60zlzFmyvbn01ur3a1vcnwN28EQKNvyY7vn/MxJtjk5eywb7ddvsq4KoZWtfzjA6B7cCithf19k590DpC6t1lnh+01S8AvtA+T5k+gta3B6NLL8s4+M12xvton6fc9wXggnH6upbOL9C+9nXIuu+hdT6rWbHNOvQ1a7YZ8EvA48C7ZtP2OqSvxrcXre9APQi8lzdCYNZsr/bLXNwnsBh4oe32SKnNhAS+ExGPlVNdAJyYmbsAyvUJ4/S1uEx36vf1ZTJzP/C/wFsm2Fs/+pjstr4sIp6MiNsjYn6TfUXEMuAdtP6KnDXb7JC+oOFtFhHzImKI1vDeA5k5K7ZXl74a317ATcAVwM/bao1vr07mYghM6NQU0+SszHwn8H5gfUS8Z4x5u/U1Vr8z8Vyms4/J9Hcr8DbgdGAX8Nmm+oqIY4CvAZ/MzJ+N0XNfe+vQV+PbLDMPZObptP7CXRkRKzrM//pTaLivRrdXRHwA2JOZj3WYp5NGX5NzMQT6dmqKzNxZrvcA36B1ltQXI2IRQLneM05fI2W6U7+vLxMRRwC/DPx0gu31o4+et3VmvlheuD8Hvkhrm/W9r4g4ktYb7Zcz8+ul3Pg269TXbNlmpZf/Af6V1sEXjW+vTn3Ngu11FvDBiHge2AS8NyL+kVm0vQ4y1ljR4XihNT72LK0dLK/tGD5tBtbzZuDYtumHaL0w/oqDd/7cUKZP4+CdP8/yxs6fR2nt0Hpt58+5pb6eg3f+bB6jn2UcPPY+433Q2vn0HK0dUPPL9PHj9LWobfqPgU397qs8zl3ATYf02ug2G6OvRrcZsBD4lTJ9NPBvwAdmwfbq1lfj/8fa1n82b+wTmBWvyVE9Tveb42y4AOfSOrLiR8CnZ2gdp5R/uNcOT/t0qb+F1g6hZ8p1+5vPp0tP2yl7+Ut9ABgu9/0tbxwG9ibgn2gdBrYFOKVLL1+h9bH3/2j9JbC2X30AHyv1HcAfTqCvf6B1yNuTtM4btaiBvn6b1kfkJ2k7jLDpbTZGX41uM+A3aR3q+GR5zD/v5//1SfTV+P+xtnnO5o0QaPw12eniaSMkqWJzcZ+AJGmCDAFJqpghIEkVMwQkqWKGgCRVzBCQpIoZApJUsf8H6xoxMSI+iJsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins = np.linspace(0, 400000, 50)\n",
    "plt.hist(loan_df.annual_inc,bins=bins,edgecolor='black',alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  16.,  266.,  793., 1487., 2167., 2098., 2467., 2285., 1463.,\n",
       "        1473.,  896.,  951.,  805.,  400.,  547.,  365.,  158.,  186.,\n",
       "         231.,  129.,   91.,   73.,  101.,   53.,   92.,   20.,   20.,\n",
       "          26.,   25.,   21.,    7.,    0.,    0.,    0.,    0.,    0.,\n",
       "           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,\n",
       "           0.,    0.,    0.,    0.]),\n",
       " array([     0.        ,   8163.26530612,  16326.53061224,  24489.79591837,\n",
       "         32653.06122449,  40816.32653061,  48979.59183673,  57142.85714286,\n",
       "         65306.12244898,  73469.3877551 ,  81632.65306122,  89795.91836735,\n",
       "         97959.18367347, 106122.44897959, 114285.71428571, 122448.97959184,\n",
       "        130612.24489796, 138775.51020408, 146938.7755102 , 155102.04081633,\n",
       "        163265.30612245, 171428.57142857, 179591.83673469, 187755.10204082,\n",
       "        195918.36734694, 204081.63265306, 212244.89795918, 220408.16326531,\n",
       "        228571.42857143, 236734.69387755, 244897.95918367, 253061.2244898 ,\n",
       "        261224.48979592, 269387.75510204, 277551.02040816, 285714.28571429,\n",
       "        293877.55102041, 302040.81632653, 310204.08163265, 318367.34693878,\n",
       "        326530.6122449 , 334693.87755102, 342857.14285714, 351020.40816327,\n",
       "        359183.67346939, 367346.93877551, 375510.20408163, 383673.46938776,\n",
       "        391836.73469388, 400000.        ]),\n",
       " <a list of 49 Patch objects>)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "ai_new=loan_df[loan_df.annual_inc<250000]\n",
    "plt.hist(ai_new.annual_inc,bins=bins,edgecolor='black',alpha=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Borrower Annual Income by State\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "med_inc=loan_df.groupby('addr_state').agg({'annual_inc':'median'}).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "#NJ has highest median annual income and FL has the lowest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Annual Income and Interest Rate\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.0, 26.0)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y1=loan_df['annual_inc']\n",
    "x1=loan_df['int_rate']\n",
    "plt.scatter(x1,y1)\n",
    "plt.xlim(4,26)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19785, 58)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y2=loan_df[loan_df['annual_inc']<300000]\n",
    "y2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.0, 26.0)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "an_n=loan_df[loan_df['annual_inc']<300000]\n",
    "y2=an_n['annual_inc']\n",
    "x2=an_n['int_rate']\n",
    "plt.scatter(x2,y2)\n",
    "plt.xlim(4,26)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.06743336],\n",
       "       [0.06743336, 1.        ]])"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r=np.corrcoef(x2,y2)\n",
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "#not significant correlation is observed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Convert Date Column\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        Dec-2011\n",
       "1        Dec-2011\n",
       "2        Dec-2011\n",
       "3        Dec-2011\n",
       "4        Dec-2011\n",
       "           ...   \n",
       "19903    Jul-2007\n",
       "19904    Jul-2007\n",
       "19905    Jul-2007\n",
       "19906    Jul-2007\n",
       "19907    Jul-2007\n",
       "Name: issue_d, Length: 19908, dtype: object"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df['issue_d']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       2011-12-01\n",
       "1       2011-12-01\n",
       "2       2011-12-01\n",
       "3       2011-12-01\n",
       "4       2011-12-01\n",
       "           ...    \n",
       "19903   2007-07-01\n",
       "19904   2007-07-01\n",
       "19905   2007-07-01\n",
       "19906   2007-07-01\n",
       "19907   2007-07-01\n",
       "Name: issue_d, Length: 19908, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df['issue_d']=pd.to_datetime(loan_df['issue_d'])\n",
    "loan_df['issue_d']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2011\n",
       "1    2011\n",
       "2    2011\n",
       "3    2011\n",
       "4    2011\n",
       "Name: issue_year, dtype: int64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df['issue_year']= pd.DatetimeIndex(loan_df['issue_d']).year\n",
    "loan_df['issue_year'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Issued Over Year\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = loan_df.groupby('issue_year').agg({'int_rate':'count'}).plot.line()\n",
    "\n",
    "\n",
    "#.agg(['issue_year','count']).plot.line()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27f588e2880>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loan_df.issue_year.value_counts().plot(kind='line')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Interest Rate Change\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>addr_state</th>\n",
       "      <th>CA</th>\n",
       "      <th>FL</th>\n",
       "      <th>IL</th>\n",
       "      <th>NJ</th>\n",
       "      <th>NY</th>\n",
       "      <th>TX</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>issue_year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2007</th>\n",
       "      <td>10.338000</td>\n",
       "      <td>10.616538</td>\n",
       "      <td>8.540000</td>\n",
       "      <td>10.698667</td>\n",
       "      <td>11.145250</td>\n",
       "      <td>8.225000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008</th>\n",
       "      <td>11.472444</td>\n",
       "      <td>10.935263</td>\n",
       "      <td>11.194833</td>\n",
       "      <td>11.430143</td>\n",
       "      <td>11.187348</td>\n",
       "      <td>10.927321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009</th>\n",
       "      <td>12.232144</td>\n",
       "      <td>12.191182</td>\n",
       "      <td>11.966685</td>\n",
       "      <td>12.199434</td>\n",
       "      <td>12.479330</td>\n",
       "      <td>12.403735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>12.001526</td>\n",
       "      <td>11.643762</td>\n",
       "      <td>11.694765</td>\n",
       "      <td>12.122847</td>\n",
       "      <td>11.846824</td>\n",
       "      <td>11.757327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>12.236692</td>\n",
       "      <td>12.152918</td>\n",
       "      <td>12.281881</td>\n",
       "      <td>12.386044</td>\n",
       "      <td>12.221262</td>\n",
       "      <td>12.214518</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "addr_state         CA         FL         IL         NJ         NY         TX\n",
       "issue_year                                                                  \n",
       "2007        10.338000  10.616538   8.540000  10.698667  11.145250   8.225000\n",
       "2008        11.472444  10.935263  11.194833  11.430143  11.187348  10.927321\n",
       "2009        12.232144  12.191182  11.966685  12.199434  12.479330  12.403735\n",
       "2010        12.001526  11.643762  11.694765  12.122847  11.846824  11.757327\n",
       "2011        12.236692  12.152918  12.281881  12.386044  12.221262  12.214518"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table=pd.pivot_table(loan_df,values='int_rate',index=['issue_year'],columns=['addr_state'])\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Status\n",
    "\n",
    "The loans in the dataset were issued before 2011 and the longest loan term is 5 years. So all the loans are either paid off or charged off.\n",
    "\n",
    "\n",
    "$PaidOffRate = \\frac{FullyPaid}{Fully Paid+Charged Off}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8521699819168174"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.array(loan_df.loan_status.value_counts())\n",
    "\n",
    "fp=a[0]\n",
    "co=a[1]\n",
    "paid_off_rate=fp/(fp+co)\n",
    "paid_off_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Term and Loan Status\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">int_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_status</th>\n",
       "      <th>Charged Off</th>\n",
       "      <th>Fully Paid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>term</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>36 months</th>\n",
       "      <td>1728</td>\n",
       "      <td>13124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60 months</th>\n",
       "      <td>1215</td>\n",
       "      <td>3841</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               int_rate           \n",
       "loan_status Charged Off Fully Paid\n",
       "term                              \n",
       "36 months          1728      13124\n",
       "60 months          1215       3841"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt_term=pd.pivot_table(loan_df,values=['int_rate'],index=['term'],columns=['loan_status'],aggfunc='count')\n",
    "pt_term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8836520333961756, 0.7596914556962026, array([ 1728, 13124], dtype=int64))"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.array(pt_term.iloc[0,:])\n",
    "por36=a[1]/(a[0]+a[1])\n",
    "b=np.array(pt_term.iloc[1,:])\n",
    "por60=b[1]/(b[0]+b[1])\n",
    "\n",
    "por36,por60,a\n",
    "#more pay off rate in case of 36 month term than 60 month term"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Loan Grade and Loan Status\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>loan_status</th>\n",
       "      <th>Charged Off</th>\n",
       "      <th>Fully Paid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>304</td>\n",
       "      <td>4571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>779</td>\n",
       "      <td>5286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>672</td>\n",
       "      <td>3415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>579</td>\n",
       "      <td>2169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>378</td>\n",
       "      <td>1056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>174</td>\n",
       "      <td>366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>57</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "loan_status  Charged Off  Fully Paid\n",
       "grade                               \n",
       "A                    304        4571\n",
       "B                    779        5286\n",
       "C                    672        3415\n",
       "D                    579        2169\n",
       "E                    378        1056\n",
       "F                    174         366\n",
       "G                     57         102"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pt_grade=pd.pivot_table(loan_df,values='int_rate',index=['grade'],columns=['loan_status'],aggfunc='count')\n",
    "pt_grade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9376410256410257,\n",
       " 0.871558120362737,\n",
       " 0.5362686415745156,\n",
       " 0.7893013100436681,\n",
       " 0.7364016736401674,\n",
       " 0.6777777777777778)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ga=np.array(pt_grade.iloc[0,:])\n",
    "por_ga=ga[1]/(ga[0]+ga[1])\n",
    "gb=np.array(pt_grade.iloc[1,:])\n",
    "por_gb=gb[1]/(gb[0]+gb[1])\n",
    "gc=np.array(pt_grade.iloc[:,1])\n",
    "por_gc=gb[1]/(gc[0]+gc[1])\n",
    "gd=np.array(pt_grade.iloc[3,:])\n",
    "por_gd=gd[1]/(gd[0]+gd[1])\n",
    "ge=np.array(pt_grade.iloc[4,:])\n",
    "por_ge=ge[1]/(ge[0]+ge[1])\n",
    "gf=np.array(pt_grade.iloc[5,:])\n",
    "por_gf=gf[1]/(gf[0]+gf[1])\n",
    "gg=np.array(pt_grade.iloc[6,:])\n",
    "por_gg=gg[1]/(gg[0]+gg[1])\n",
    "por_ga,por_gb,por_gc,por_gd,por_ge,por_gf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "#highest pay off rate in grade A and lowest in grade C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "## Data Preparation, Modeling and Model Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loan Status\n",
    "\n",
    "The dataset has loans initiated from 2007 to 2011. All loans have been either fully paid or charged off. So we will create a 'repaid' column in loan_df by encoding loan status and map Charged Off to 0 and Fully Paid to 1. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fully Paid     16965\n",
       "Charged Off     2943\n",
       "Name: loan_status, dtype: int64"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.loan_status.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    16965\n",
       "0     2943\n",
       "Name: repaid, dtype: int64"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mapping_dict = {'Charged Off':0, 'Fully Paid':1}\n",
    "loan_df['repaid'] = loan_df.loan_status.map(mapping_dict)\n",
    "loan_df.repaid.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Paid Off Rate\n",
    "With the newly created repaid column, we can calculate paid-off rate of all the loans in the dataset with the mean value of the column, which is about 85%, as shown in the next code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8521699819168174"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.repaid.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "###  Loan Term in Year\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        3\n",
       "1        3\n",
       "2        3\n",
       "3        5\n",
       "4        5\n",
       "        ..\n",
       "19903    3\n",
       "19904    3\n",
       "19905    3\n",
       "19906    3\n",
       "19907    3\n",
       "Name: loan_term_year, Length: 19908, dtype: int64"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df['loan_term_year']=loan_df.term.map({'36 months':3,'60 months':5})\n",
    "loan_df['loan_term_year']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_term_year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.883652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.759691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  repaid\n",
       "loan_term_year          \n",
       "3               0.883652\n",
       "5               0.759691"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('loan_term_year').agg({'repaid':'mean'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Encode Categorical Features\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "      <th>issue_d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>small_business</th>\n",
       "      <td>0.728177</td>\n",
       "      <td>905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>educational</th>\n",
       "      <td>0.801242</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>house</th>\n",
       "      <td>0.823864</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>moving</th>\n",
       "      <td>0.829653</td>\n",
       "      <td>317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>other</th>\n",
       "      <td>0.843689</td>\n",
       "      <td>2060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>debt_consolidation</th>\n",
       "      <td>0.845670</td>\n",
       "      <td>9389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>medical</th>\n",
       "      <td>0.854286</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vacation</th>\n",
       "      <td>0.859296</td>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>renewable_energy</th>\n",
       "      <td>0.862745</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_improvement</th>\n",
       "      <td>0.875188</td>\n",
       "      <td>1330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>credit_card</th>\n",
       "      <td>0.885757</td>\n",
       "      <td>2696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>major_purchase</th>\n",
       "      <td>0.887405</td>\n",
       "      <td>1048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>car</th>\n",
       "      <td>0.892285</td>\n",
       "      <td>687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wedding</th>\n",
       "      <td>0.894249</td>\n",
       "      <td>539</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      repaid  issue_d\n",
       "purpose                              \n",
       "small_business      0.728177      905\n",
       "educational         0.801242      161\n",
       "house               0.823864      176\n",
       "moving              0.829653      317\n",
       "other               0.843689     2060\n",
       "debt_consolidation  0.845670     9389\n",
       "medical             0.854286      350\n",
       "vacation            0.859296      199\n",
       "renewable_energy    0.862745       51\n",
       "home_improvement    0.875188     1330\n",
       "credit_card         0.885757     2696\n",
       "major_purchase      0.887405     1048\n",
       "car                 0.892285      687\n",
       "wedding             0.894249      539"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#relationship between purpose and repaid rate\n",
    "loan_df.groupby('purpose').agg({'repaid':'mean', 'issue_d':'count'}).sort_values(by='repaid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([11,  9,  0,  2,  1,  4,  6,  8,  7,  5, 12, 13, 10,  3])"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#encode purpose to create purpose_code\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "le = LabelEncoder()\n",
    "loan_df['purpose_code'] = le.fit_transform(loan_df['purpose'])\n",
    "loan_df['purpose_code'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "      <th>issue_d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>0.641509</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>0.677778</td>\n",
       "      <td>540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>0.736402</td>\n",
       "      <td>1434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>0.789301</td>\n",
       "      <td>2748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>0.835576</td>\n",
       "      <td>4087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>0.871558</td>\n",
       "      <td>6065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>0.937641</td>\n",
       "      <td>4875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         repaid  issue_d\n",
       "grade                   \n",
       "G      0.641509      159\n",
       "F      0.677778      540\n",
       "E      0.736402     1434\n",
       "D      0.789301     2748\n",
       "C      0.835576     4087\n",
       "B      0.871558     6065\n",
       "A      0.937641     4875"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('grade').agg({'repaid':'mean','issue_d':'count'}).sort_values(by='repaid')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "le1 = LabelEncoder()\n",
    "loan_df['grade_code'] = le1.fit_transform(loan_df['grade'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "      <th>issue_d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>addr_state</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>FL</th>\n",
       "      <td>0.822772</td>\n",
       "      <td>2872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CA</th>\n",
       "      <td>0.840816</td>\n",
       "      <td>7105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NJ</th>\n",
       "      <td>0.847978</td>\n",
       "      <td>1855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NY</th>\n",
       "      <td>0.868745</td>\n",
       "      <td>3817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IL</th>\n",
       "      <td>0.870164</td>\n",
       "      <td>1525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TX</th>\n",
       "      <td>0.882224</td>\n",
       "      <td>2734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              repaid  issue_d\n",
       "addr_state                   \n",
       "FL          0.822772     2872\n",
       "CA          0.840816     7105\n",
       "NJ          0.847978     1855\n",
       "NY          0.868745     3817\n",
       "IL          0.870164     1525\n",
       "TX          0.882224     2734"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('addr_state').agg({'repaid':'mean','issue_d':'count'}).sort_values(by='repaid')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "le2 = LabelEncoder()\n",
    "loan_df['addr_state_code'] = le2.fit_transform(loan_df['addr_state'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "      <th>issue_d</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_ownership</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>OTHER</th>\n",
       "      <td>0.818182</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OWN</th>\n",
       "      <td>0.841527</td>\n",
       "      <td>1546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RENT</th>\n",
       "      <td>0.847620</td>\n",
       "      <td>10966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MORTGAGE</th>\n",
       "      <td>0.861379</td>\n",
       "      <td>7351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NONE</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  repaid  issue_d\n",
       "home_ownership                   \n",
       "OTHER           0.818182       44\n",
       "OWN             0.841527     1546\n",
       "RENT            0.847620    10966\n",
       "MORTGAGE        0.861379     7351\n",
       "NONE            1.000000        1"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.groupby('home_ownership').agg({'repaid':'mean','issue_d':'count'}).sort_values(by='repaid')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "le2 = LabelEncoder()\n",
    "loan_df['home_ownership_code'] = le2.fit_transform(loan_df['home_ownership'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Manage Missing Values\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00     455\n",
       "0.20      38\n",
       "78.70     34\n",
       "32.00     34\n",
       "28.90     33\n",
       "        ... \n",
       "58.77      1\n",
       "21.59      1\n",
       "0.05       1\n",
       "25.74      1\n",
       "37.63      1\n",
       "Name: revol_util, Length: 1053, dtype: int64"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.revol_util.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean=loan_df.revol_util.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49.424966061641975"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    19908.000000\n",
       "mean        49.424966\n",
       "std         28.184935\n",
       "min          0.000000\n",
       "25%         26.500000\n",
       "50%         50.200000\n",
       "75%         72.800000\n",
       "max         99.900000\n",
       "Name: revol_util, dtype: float64"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "loan_df['revol_util']=loan_df['revol_util'].fillna(mean)\n",
    "loan_df['revol_util'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    19908.000000\n",
       "mean         0.814447\n",
       "std          6.146785\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          0.000000\n",
       "max         49.424966\n",
       "Name: pub_rec_bankruptcies, dtype: float64"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "loan_df['pub_rec_bankruptcies'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "mode=loan_df.revol_util.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    19908.000000\n",
       "mean         0.814447\n",
       "std          6.146785\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          0.000000\n",
       "max         49.424966\n",
       "Name: pub_rec_bankruptcies, dtype: float64"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "loan_df.pub_rec_bankruptcies.fillna(value=mode,inplace=True)\n",
    "\n",
    "loan_df['pub_rec_bankruptcies'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling and Model Evaluation\n",
    "\n",
    "Construct a classification model to predict whether a loan will be fully paid. Column 'repaid' will be the label. The purpose of the model is to identify loans that are likely to be fully paid.\n",
    "\n",
    "steps:\n",
    "- Identify columns we need for modeling and the next steps. \n",
    "- Create a clean DataFrame `df` with needed columns only.\n",
    "- Split the DataFrame to train and test.\n",
    "- Identify columns needed to train the classification model.\n",
    "- Create train and test set for the classification model.\n",
    "- Create train and test label for the classification model.\n",
    "- Train the classification model.\n",
    "- Predict with the classification model.\n",
    "- Evaluate the classification model.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keep Columns\n",
    "\n",
    "clean DataFrame `df` which keeps following columns in the original DataFrame `loan_df`.\n",
    "- funded_amnt\n",
    "- loan_term_year\n",
    "- int_rate\n",
    "- grade_code\n",
    "- purpose_code\n",
    "- addr_state_code\n",
    "- home_ownership_code\n",
    "- annual_inc\n",
    "- dti\n",
    "- revol_util\n",
    "- pub_rec_bankruptcies\n",
    "- repaid\n",
    "- total_pymnt\n",
    "\n",
    "Among all keeped columns, repaid will be the label, total_pymnt will be used to calculate portfolio return in the next step. Other featues will be used to train classification models.\n",
    "\n",
    "Only features that are available before the loan is initiated can be used in the classification. Features like recoveries, total_rec_prncp, which are only available after the loan is closed, should not be included in the training features. If your classfication achieves close to 100% accuracy rate, it's likely that you include features that are only avaiable after the loan is closed.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "#columns needed for the classification AND the next steps\n",
    "keep_columns = ['funded_amnt', 'loan_term_year', 'int_rate', 'grade_code', 'purpose_code', \n",
    "                'addr_state_code', 'home_ownership_code', 'annual_inc', 'dti', 'revol_util', \n",
    "                'pub_rec_bankruptcies', 'repaid', 'total_pymnt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a clean DataFrame\n",
    "df = loan_df[keep_columns].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19908 entries, 0 to 19907\n",
      "Data columns (total 13 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   funded_amnt           19908 non-null  int64  \n",
      " 1   loan_term_year        19908 non-null  int64  \n",
      " 2   int_rate              19908 non-null  float64\n",
      " 3   grade_code            19908 non-null  int32  \n",
      " 4   purpose_code          19908 non-null  int32  \n",
      " 5   addr_state_code       19908 non-null  int32  \n",
      " 6   home_ownership_code   19908 non-null  int32  \n",
      " 7   annual_inc            19908 non-null  float64\n",
      " 8   dti                   19908 non-null  float64\n",
      " 9   revol_util            19908 non-null  float64\n",
      " 10  pub_rec_bankruptcies  19908 non-null  float64\n",
      " 11  repaid                19908 non-null  int64  \n",
      " 12  total_pymnt           19908 non-null  float64\n",
      "dtypes: float64(6), int32(4), int64(3)\n",
      "memory usage: 1.7 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split DataFrame to Train and Test\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "#columns for the classification\n",
    "model_columns = ['funded_amnt', 'purpose_code', 'addr_state_code', 'home_ownership_code', 'annual_inc', \n",
    "                 'dti', 'revol_util', 'pub_rec_bankruptcies']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "df_train, df_test = train_test_split(df, test_size=0.4, random_state=23)\n",
    "d_train = df_train[model_columns]\n",
    "d_test = df_test[model_columns]\n",
    "l_train = df_train.repaid\n",
    "l_test = df_test.repaid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest Classifier\n",
    "\n",
    "\n",
    "The first classifier achieve accuracy rate 83.5%, which is actually worse than the zero model. A zero model always predicts with the majority class, which is 1 in the dataset. Since the overal repaid rate is 85.2%, so the accuracy rate of the zero model is 85.2%.\n",
    "\n",
    "In this project, the accuracy rate is not what we are looking for. The purpose of the classification model is to help us select loans that are more likely to be repaid. So our focus is on the precision rate of class 1. From the classification report of the first model, we can see that the precision rate of class 1 is 0.86, or 86%. This means among all the loans identified as to be fully paid by the classification model, 86% of them are actually fully paid. This is a not much better than the repaid rate of the whole test set, which is about 85%. The reason is that the model only has 0.07 recall rate on class 0, which means, for all loans that are charged off, the model only identifies 7% of them as charged off.\n",
    "\n",
    "The dataset is highly imbalanced, with 85% class 1 and 15% class 0, we can achieve better class 1 precision by setting balanced class_weight. In the second model, we set `class_weight='balanced'`. The default RandomForestClassifier is not very senstive to class_weight change, so we also limit `max_depth` to increase the effectiveness of class_weight change.\n",
    "\n",
    "From the classification report of the second Random Forest Classifier, we can see that even though the accuracy rate drops to 65%, the model has a lot larger class 0 recall at 0.44. It means the model identifies 44% of all charged off loans correctly. More importantly, we get better class 1 precission, 88%, which means, among all loans that are predicted as to be fully paid by the model, 88% of them are actually fully paid.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.8495730788548468\n",
      "Confusion Matrix:\n",
      "[[  11 1175]\n",
      " [  23 6755]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.32      0.01      0.02      1186\n",
      "           1       0.85      1.00      0.92      6778\n",
      "\n",
      "    accuracy                           0.85      7964\n",
      "   macro avg       0.59      0.50      0.47      7964\n",
      "weighted avg       0.77      0.85      0.78      7964\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import metrics\n",
    "\n",
    "# Create Regressor with default properties\n",
    "rfc1 = RandomForestClassifier(random_state=23)\n",
    "\n",
    "# Fit estimator and display score\n",
    "rfc1 = rfc1.fit(d_train, l_train)\n",
    "print(f'Accuracy Score: {rfc1.score(d_test, l_test)}')\n",
    "pred = rfc1.predict(d_test)\n",
    "print(f'Confusion Matrix:\\n{metrics.confusion_matrix(l_test, pred)}')\n",
    "print(f'Classification Report:\\n{metrics.classification_report(l_test, pred)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8510798593671521"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#zero model accuracy\n",
    "df_test.repaid.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.6813159216474134\n",
      "Confusion Matrix:\n",
      "[[ 527  659]\n",
      " [1879 4899]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.22      0.44      0.29      1186\n",
      "           1       0.88      0.72      0.79      6778\n",
      "\n",
      "    accuracy                           0.68      7964\n",
      "   macro avg       0.55      0.58      0.54      7964\n",
      "weighted avg       0.78      0.68      0.72      7964\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfc2 = RandomForestClassifier(max_depth=7, class_weight='balanced', random_state=23)\n",
    "\n",
    "# Fit estimator and display score\n",
    "rfc2 = rfc2.fit(d_train, l_train)\n",
    "print(f'Accuracy Score: {rfc2.score(d_test, l_test)}')\n",
    "pred = rfc2.predict(d_test)\n",
    "print(f'Confusion Matrix:\\n{metrics.confusion_matrix(l_test, pred)}')\n",
    "print(f'Classification Report:\\n{metrics.classification_report(l_test, pred)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression with Default Class Weight\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score=85.108%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg=LogisticRegression(C=1E6)\n",
    "logreg=logreg.fit(d_train,l_train)\n",
    "predicted=logreg.predict(d_test)\n",
    "score1=logreg.score(d_test, l_test)\n",
    "print(f'score={100*score1:4.3f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00      1186\n",
      "           1       0.85      1.00      0.92      6778\n",
      "\n",
      "    accuracy                           0.85      7964\n",
      "   macro avg       0.43      0.50      0.46      7964\n",
      "weighted avg       0.72      0.85      0.78      7964\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Classification Report:')\n",
    "print(metrics.classification_report(l_test, predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[   0 1186]\n",
      " [   0 6778]]\n"
     ]
    }
   ],
   "source": [
    "print(f'Confusion Matrix:\\n{metrics.confusion_matrix(l_test, predicted)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Logistic Regression with Balanced Class Weight\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "score=48.393%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg=LogisticRegression(C=1E6, class_weight='balanced')\n",
    "logreg=logreg.fit(d_train,l_train)\n",
    "predicted2=logreg.predict(d_test)\n",
    "score2=logreg.score(d_test,l_test)\n",
    "print(f'score={100*score2:4.3f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "#accuracy decreased"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.18      0.72      0.29      1186\n",
      "           1       0.90      0.44      0.59      6778\n",
      "\n",
      "    accuracy                           0.48      7964\n",
      "   macro avg       0.54      0.58      0.44      7964\n",
      "weighted avg       0.79      0.48      0.55      7964\n",
      "\n"
     ]
    }
   ],
   "source": [
    " \n",
    "print('Classification Report:')\n",
    "print(metrics.classification_report(l_test, predicted2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[ 857  329]\n",
      " [3781 2997]]\n"
     ]
    }
   ],
   "source": [
    "print(f'Confusion Matrix:\\n{metrics.confusion_matrix(l_test, predicted2)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "###  good model as precision for class 1 has increased which was our objective"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Module 3: Construct Loan Portfolio\n",
    "\n",
    "Construct loan portfolio out of the test set with the help of our classification model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Portfolio Annual Return\n",
    "\n",
    "Calculation of loan return is very complicated since the loan is paid by monthly installments. In this project, we simplify the calculation by using the total payment and funded amount. We can use following formula to calculate the total return:\n",
    "\n",
    "$TotalReturn = \\frac{Total Payment}{Funded Amount} - 1$\n",
    "\n",
    "The total return doesn't reflect loan profitability since loans have different terms. It's more accurate to compare annual returns. There are only two terms in the dataset, 36 months and 60 months. The formula to calculate annual return is:\n",
    "\n",
    "$Annualized Return = (1+Total Return)^{(1/years)} - 1$. \n",
    "\n",
    "For example, if total return of a 36 month loan is 10%, then annualized return = `(1 + 0.1)**(1/3) - 1` = `0.032`.\n",
    "\n",
    "This is not the true annualized return of a loan. But the goal of this project is to identify loans to invest, so we just need a benchmark to evaluate loan portfolio performance.\n",
    "\n",
    "In the following code cells, we define a function to calculate annual return of a loan portfolio. The function calculates annual return for 36 month and 60 month loans in a portfolio separately. \n",
    "\n",
    "Then we use the `get_portfolio_annual_return()` function to find out the annual returns of all 36 months and 60 months loans in the test dataset. There are 5960 36 months loans, with annual return 2.69%, and 2004 60 months loans, with annual return 2.74%.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_portfolio_annual_return(df):\n",
    "    '''\n",
    "    Get annual return of 36 and 60 month loans in the portfolio df.\n",
    "    '''\n",
    "    annual_return_36, annual_return_60 = 0, 0\n",
    "    df_36 = df[df.loan_term_year==3]\n",
    "    if(len(df_36)>0):\n",
    "        return_36 = df_36.total_pymnt.sum()/df_36.funded_amnt.sum()-1\n",
    "        annual_return_36 = (1+return_36)**(1/3)-1\n",
    "    df_60 = df[df.loan_term_year==5]\n",
    "    if(len(df_60)>0):\n",
    "        return_60 = df_60.total_pymnt.sum()/df_60.funded_amnt.sum()-1\n",
    "        annual_return_60 = (1+return_60)**(1/5)-1\n",
    "    print (f'36 months loan:{len(df_36)}, Annual return:{round(annual_return_36, 4)}')\n",
    "    print (f'60 months loan:{len(df_60)}, Annual return:{round(annual_return_60, 4)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:5960, Annual return:0.0269\n",
      "60 months loan:2004, Annual return:0.0274\n"
     ]
    }
   ],
   "source": [
    "#get return of the test set.\n",
    "get_portfolio_annual_return(df_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Construct Loan Portfolio with RandomForestClassifier\n",
    "\n",
    "RandomForestClassifier model with `class_weight='balanced'` (rfc2) to select loans from the test set. Compare the annual return of the selected loans with that of the test set. \n",
    "\n",
    "The RandomForestClassifier mode selects 4121 loans from 5960 36 months loans, with annual return 2.95%; and selects 1233 loans from 2004 60 months loans, with annual return 2.87. The portfolio achieves better return on both 36 months loans and 60 months loans comparing to the whole test set, which are 2.69% and 2.74% respectively.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "rfc2 = RandomForestClassifier(max_depth=7, class_weight='balanced', random_state=23)\n",
    "rfc2 = rfc2.fit(d_train, l_train)\n",
    "pred = rfc2.predict(d_test)\n",
    "\n",
    "# create prediction column in the test set.\n",
    "df_test['prediction'] = pred\n",
    "portfolio_rfc2 = df_test[df_test.prediction==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>loan_term_year</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>grade_code</th>\n",
       "      <th>purpose_code</th>\n",
       "      <th>addr_state_code</th>\n",
       "      <th>home_ownership_code</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>repaid</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10844</th>\n",
       "      <td>10000</td>\n",
       "      <td>5</td>\n",
       "      <td>9.62</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>119400.0</td>\n",
       "      <td>15.97</td>\n",
       "      <td>8.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>11394.755422</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7871</th>\n",
       "      <td>13000</td>\n",
       "      <td>3</td>\n",
       "      <td>10.99</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>46000.0</td>\n",
       "      <td>11.66</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>15319.450558</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7962</th>\n",
       "      <td>8000</td>\n",
       "      <td>5</td>\n",
       "      <td>15.28</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>53140.0</td>\n",
       "      <td>12.19</td>\n",
       "      <td>11.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10931.047274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8507</th>\n",
       "      <td>4000</td>\n",
       "      <td>3</td>\n",
       "      <td>7.29</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>92000.0</td>\n",
       "      <td>12.43</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4233.400769</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6429</th>\n",
       "      <td>1500</td>\n",
       "      <td>3</td>\n",
       "      <td>5.42</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>58000.0</td>\n",
       "      <td>5.98</td>\n",
       "      <td>61.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1626.605307</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12348</th>\n",
       "      <td>10525</td>\n",
       "      <td>3</td>\n",
       "      <td>13.61</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>48996.0</td>\n",
       "      <td>5.90</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12878.677756</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7235</th>\n",
       "      <td>1000</td>\n",
       "      <td>3</td>\n",
       "      <td>10.99</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>17.31</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1176.619636</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8304</th>\n",
       "      <td>20000</td>\n",
       "      <td>5</td>\n",
       "      <td>10.74</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>95000.0</td>\n",
       "      <td>22.67</td>\n",
       "      <td>22.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>25935.574028</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15809</th>\n",
       "      <td>5000</td>\n",
       "      <td>3</td>\n",
       "      <td>10.25</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>23.85</td>\n",
       "      <td>41.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5829.627837</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5796</th>\n",
       "      <td>4100</td>\n",
       "      <td>3</td>\n",
       "      <td>10.59</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>57000.0</td>\n",
       "      <td>7.54</td>\n",
       "      <td>49.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4803.590450</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11420</th>\n",
       "      <td>8000</td>\n",
       "      <td>5</td>\n",
       "      <td>8.88</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>1.58</td>\n",
       "      <td>45.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9776.497034</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2365</th>\n",
       "      <td>1500</td>\n",
       "      <td>3</td>\n",
       "      <td>16.29</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>48000.0</td>\n",
       "      <td>8.97</td>\n",
       "      <td>85.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>647.590000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6876</th>\n",
       "      <td>12000</td>\n",
       "      <td>3</td>\n",
       "      <td>14.79</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>44400.0</td>\n",
       "      <td>8.43</td>\n",
       "      <td>65.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13282.450438</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1311</th>\n",
       "      <td>7200</td>\n",
       "      <td>3</td>\n",
       "      <td>10.65</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>24.55</td>\n",
       "      <td>81.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>8442.960819</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10071</th>\n",
       "      <td>9600</td>\n",
       "      <td>3</td>\n",
       "      <td>5.79</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>9.42</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>10481.108320</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18490</th>\n",
       "      <td>24000</td>\n",
       "      <td>3</td>\n",
       "      <td>11.58</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>47004.0</td>\n",
       "      <td>14.53</td>\n",
       "      <td>32.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>27174.199596</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6118</th>\n",
       "      <td>3000</td>\n",
       "      <td>3</td>\n",
       "      <td>6.99</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>48000.0</td>\n",
       "      <td>18.65</td>\n",
       "      <td>43.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3334.223173</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15430</th>\n",
       "      <td>4800</td>\n",
       "      <td>3</td>\n",
       "      <td>7.88</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>22000.0</td>\n",
       "      <td>16.09</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5226.232065</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7912</th>\n",
       "      <td>7000</td>\n",
       "      <td>3</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>6.46</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7665.159323</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3800</th>\n",
       "      <td>9600</td>\n",
       "      <td>3</td>\n",
       "      <td>16.29</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>48000.0</td>\n",
       "      <td>17.82</td>\n",
       "      <td>56.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12181.901138</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       funded_amnt  loan_term_year  int_rate  grade_code  purpose_code  \\\n",
       "10844        10000               5      9.62           1             4   \n",
       "7871         13000               3     10.99           1             7   \n",
       "7962          8000               5     15.28           3             1   \n",
       "8507          4000               3      7.29           0             2   \n",
       "6429          1500               3      5.42           0             9   \n",
       "12348        10525               3     13.61           2             2   \n",
       "7235          1000               3     10.99           1             2   \n",
       "8304         20000               5     10.74           1             2   \n",
       "15809         5000               3     10.25           1             9   \n",
       "5796          4100               3     10.59           1             7   \n",
       "11420         8000               5      8.88           1             0   \n",
       "2365          1500               3     16.29           3             2   \n",
       "6876         12000               3     14.79           2             2   \n",
       "1311          7200               3     10.65           1             1   \n",
       "10071         9600               3      5.79           0             4   \n",
       "18490        24000               3     11.58           1             2   \n",
       "6118          3000               3      6.99           0             0   \n",
       "15430         4800               3      7.88           0             1   \n",
       "7912          7000               3      5.99           0             9   \n",
       "3800          9600               3     16.29           3             2   \n",
       "\n",
       "       addr_state_code  home_ownership_code  annual_inc    dti  revol_util  \\\n",
       "10844                2                    0    119400.0  15.97         8.1   \n",
       "7871                 5                    4     46000.0  11.66         9.0   \n",
       "7962                 4                    4     53140.0  12.19        11.6   \n",
       "8507                 0                    0     92000.0  12.43        93.0   \n",
       "6429                 0                    4     58000.0   5.98        61.9   \n",
       "12348                0                    0     48996.0   5.90        36.0   \n",
       "7235                 1                    4     40000.0  17.31        61.0   \n",
       "8304                 2                    0     95000.0  22.67        22.2   \n",
       "15809                3                    4     65000.0  23.85        41.8   \n",
       "5796                 4                    4     57000.0   7.54        49.7   \n",
       "11420                3                    0     75000.0   1.58        45.2   \n",
       "2365                 5                    3     48000.0   8.97        85.4   \n",
       "6876                 4                    4     44400.0   8.43        65.9   \n",
       "1311                 1                    4     50000.0  24.55        81.9   \n",
       "10071                2                    0     65000.0   9.42         8.9   \n",
       "18490                2                    4     47004.0  14.53        32.4   \n",
       "6118                 4                    4     48000.0  18.65        43.7   \n",
       "15430                4                    4     22000.0  16.09         6.7   \n",
       "7912                 5                    0     50000.0   6.46         0.8   \n",
       "3800                 2                    4     48000.0  17.82        56.4   \n",
       "\n",
       "       pub_rec_bankruptcies  repaid   total_pymnt  prediction  \n",
       "10844                   0.0       1  11394.755422           1  \n",
       "7871                    0.0       1  15319.450558           1  \n",
       "7962                    0.0       1  10931.047274           1  \n",
       "8507                    0.0       1   4233.400769           1  \n",
       "6429                    0.0       1   1626.605307           1  \n",
       "12348                   0.0       1  12878.677756           1  \n",
       "7235                    0.0       1   1176.619636           1  \n",
       "8304                    0.0       1  25935.574028           1  \n",
       "15809                   0.0       1   5829.627837           1  \n",
       "5796                    0.0       1   4803.590450           1  \n",
       "11420                   0.0       1   9776.497034           1  \n",
       "2365                    0.0       0    647.590000           1  \n",
       "6876                    0.0       1  13282.450438           1  \n",
       "1311                    0.0       1   8442.960819           1  \n",
       "10071                   0.0       1  10481.108320           1  \n",
       "18490                   0.0       1  27174.199596           1  \n",
       "6118                    0.0       1   3334.223173           1  \n",
       "15430                   0.0       1   5226.232065           1  \n",
       "7912                    0.0       1   7665.159323           1  \n",
       "3800                    0.0       1  12181.901138           1  "
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio_rfc2.sample(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8510798593671521"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.repaid.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8814321698452681"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio_rfc2.repaid.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:5960, Annual return:0.0269\n",
      "60 months loan:2004, Annual return:0.0274\n"
     ]
    }
   ],
   "source": [
    "get_portfolio_annual_return(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:4268, Annual return:0.0291\n",
      "60 months loan:1290, Annual return:0.0305\n"
     ]
    }
   ],
   "source": [
    "#return of the loan portfolio selected by rfc2\n",
    "get_portfolio_annual_return(portfolio_rfc2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Impact of Loan Term\n",
    "\n",
    "In the RandomForestClassifier demo, we don't include loan term in the training features. But 36 months loans have much higher paid-off rate than that of 60 months loans. It seems obvious that loan term should be included in the training feature.\n",
    "\n",
    "In the following code cells add loan_term_year to the training feature and train the RandomForestClassifier with class_weight='balanced'.\n",
    "\n",
    "Comparing to the portfolio selected by rfc2, in the new portfolio, 36 months loan return drops a bit and 60 months loan return increases a bit. But the biggest impact is that in the new portfolio, there are 10 times more 36 months loans than 60 months loans. While in the dataset, the ratio is about 3 to 1. The reason is that since 36 months loans have much higher repaid rate, when we set class_weight='balanced', the model will bias toward 36 months loans."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_term_year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.883652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.759691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  repaid\n",
       "loan_term_year          \n",
       "3               0.883652\n",
       "5               0.759691"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check repaid rate of 36 months loans and 60 months loans\n",
    "loan_df.groupby('loan_term_year').agg({'repaid':'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:5258, Annual return:0.028\n",
      "60 months loan:418, Annual return:0.0373\n"
     ]
    }
   ],
   "source": [
    "# Add loan_term_year to training feature\n",
    "model_columns2 = ['funded_amnt', 'purpose_code', 'addr_state_code', 'home_ownership_code', 'annual_inc', \n",
    "                 'dti', 'revol_util', 'pub_rec_bankruptcies', 'loan_term_year']\n",
    "d_train = df_train[model_columns2]\n",
    "d_test = df_test[model_columns2]\n",
    "\n",
    "# Train RandomForestClassifier with new features\n",
    "rfc3 = RandomForestClassifier(max_depth=7, class_weight='balanced', random_state=23)\n",
    "rfc3 = rfc3.fit(d_train, l_train)\n",
    "pred = rfc3.predict(d_test)\n",
    "\n",
    "# Create portfolio and check return\n",
    "df_test['prediction'] = pred\n",
    "portfolio_rfc3 = df_test[df_test.prediction==1]\n",
    "#return of the loan portfolio selected by rfc3\n",
    "get_portfolio_annual_return(portfolio_rfc3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:4268, Annual return:0.0291\n",
      "60 months loan:1290, Annual return:0.0305\n"
     ]
    }
   ],
   "source": [
    "get_portfolio_annual_return(portfolio_rfc2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:5960, Annual return:0.0269\n",
      "60 months loan:2004, Annual return:0.0274\n"
     ]
    }
   ],
   "source": [
    "get_portfolio_annual_return(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    5258\n",
       "5     418\n",
       "Name: loan_term_year, dtype: int64"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check number of 36 months and 60 months loans\n",
    "portfolio_rfc3.loan_term_year.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Improvements with Filters\n",
    "\n",
    "pub_rec_bankruptcies is the number of public record bankruptcies of a loan borrower. As show in the next code cell, vast majority of loans have pub_rec_bankruptcies = 0, which means no public record of bankruptcies.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.000000     18852\n",
       "1.000000       742\n",
       "49.424966      313\n",
       "2.000000         1\n",
       "Name: pub_rec_bankruptcies, dtype: int64"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.pub_rec_bankruptcies.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We may include pub_rec_bankruptcies in the training features. Another way is to use it as a filter. In the next code cell, we check returns of loans with and without public record bankruptcies in the data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:14003, Annual return:0.0298\n",
      "60 months loan:4849, Annual return:0.029\n"
     ]
    }
   ],
   "source": [
    "#returns of loans without bankruptcy record\n",
    "get_portfolio_annual_return(loan_df[loan_df.pub_rec_bankruptcies==0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:849, Annual return:0.0083\n",
      "60 months loan:207, Annual return:0.0198\n"
     ]
    }
   ],
   "source": [
    "#returns of loans with bankruptcy record\n",
    "get_portfolio_annual_return(loan_df[loan_df.pub_rec_bankruptcies>0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since loans without public bankruptcies recrods have significantly higher returns, we may filter out all loans that have public bankruptcies recrods from the portfolio determined by rfc2. The new portfolio has a little better return as shown in the following code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:4037, Annual return:0.0299\n",
      "60 months loan:1242, Annual return:0.0317\n"
     ]
    }
   ],
   "source": [
    "portfolio_rfc2_no_prb = portfolio_rfc2[portfolio_rfc2.pub_rec_bankruptcies==0]\n",
    "get_portfolio_annual_return(portfolio_rfc2_no_prb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Construct Loan Portfolio with Logistic Regression Model\n",
    "\n",
    "Construct a loan portfolio with the Logistic Regression model with `class_weight='balanced'`.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:2632, Annual return:0.029\n",
      "60 months loan:686, Annual return:0.0353\n"
     ]
    }
   ],
   "source": [
    "reg_log=LogisticRegression(class_weight='balanced')\n",
    "reg_log=reg_log.fit(d_train,l_train)\n",
    "pred3=reg_log.predict(d_test)\n",
    "df_test['prediction'] = pred3\n",
    "portfolio_rlc3 = df_test[df_test.prediction==1]\n",
    "#return of the loan portfolio selected by rfc3\n",
    "get_portfolio_annual_return(portfolio_rlc3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "portfolio_rlc3_no_pbr=portfolio_rlc3[portfolio_rlc3.pub_rec_bankruptcies==0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>loan_term_year</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>grade_code</th>\n",
       "      <th>purpose_code</th>\n",
       "      <th>addr_state_code</th>\n",
       "      <th>home_ownership_code</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>repaid</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13202</th>\n",
       "      <td>15000</td>\n",
       "      <td>5</td>\n",
       "      <td>13.98</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>125000.0</td>\n",
       "      <td>15.35</td>\n",
       "      <td>80.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>20932.049347</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8230</th>\n",
       "      <td>7000</td>\n",
       "      <td>3</td>\n",
       "      <td>7.29</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>19.54</td>\n",
       "      <td>83.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7622.612042</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6112</th>\n",
       "      <td>7000</td>\n",
       "      <td>3</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7508.402271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8850</th>\n",
       "      <td>5000</td>\n",
       "      <td>3</td>\n",
       "      <td>7.29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>12.94</td>\n",
       "      <td>51.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5581.772363</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9933</th>\n",
       "      <td>4800</td>\n",
       "      <td>5</td>\n",
       "      <td>10.74</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>61000.0</td>\n",
       "      <td>14.28</td>\n",
       "      <td>28.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>830.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8010</th>\n",
       "      <td>12000</td>\n",
       "      <td>5</td>\n",
       "      <td>13.80</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112000.0</td>\n",
       "      <td>7.42</td>\n",
       "      <td>44.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>15739.033701</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9098</th>\n",
       "      <td>6800</td>\n",
       "      <td>3</td>\n",
       "      <td>5.79</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>12.85</td>\n",
       "      <td>17.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7369.203562</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10246</th>\n",
       "      <td>20000</td>\n",
       "      <td>5</td>\n",
       "      <td>14.91</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>131000.0</td>\n",
       "      <td>17.93</td>\n",
       "      <td>27.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>21448.111353</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1899</th>\n",
       "      <td>4350</td>\n",
       "      <td>3</td>\n",
       "      <td>15.27</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>12.24</td>\n",
       "      <td>77.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4019.590000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10242</th>\n",
       "      <td>9000</td>\n",
       "      <td>3</td>\n",
       "      <td>5.79</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>84000.0</td>\n",
       "      <td>10.91</td>\n",
       "      <td>35.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9804.321357</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3156 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       funded_amnt  loan_term_year  int_rate  grade_code  purpose_code  \\\n",
       "13202        15000               5     13.98           2             2   \n",
       "8230          7000               3      7.29           0             9   \n",
       "6112          7000               3      5.99           0             2   \n",
       "8850          5000               3      7.29           0             1   \n",
       "9933          4800               5     10.74           1             7   \n",
       "...            ...             ...       ...         ...           ...   \n",
       "8010         12000               5     13.80           2             6   \n",
       "9098          6800               3      5.79           0             2   \n",
       "10246        20000               5     14.91           3             2   \n",
       "1899          4350               3     15.27           2             1   \n",
       "10242         9000               3      5.79           0             2   \n",
       "\n",
       "       addr_state_code  home_ownership_code  annual_inc    dti  revol_util  \\\n",
       "13202                3                    0    125000.0  15.35        80.9   \n",
       "8230                 4                    0    150000.0  19.54        83.1   \n",
       "6112                 5                    4     35000.0  10.80         2.9   \n",
       "8850                 0                    4     60000.0  12.94        51.7   \n",
       "9933                 3                    3     61000.0  14.28        28.9   \n",
       "...                ...                  ...         ...    ...         ...   \n",
       "8010                 0                    0    112000.0   7.42        44.2   \n",
       "9098                 4                    4     45000.0  12.85        17.1   \n",
       "10246                4                    0    131000.0  17.93        27.5   \n",
       "1899                 0                    4     90000.0  12.24        77.6   \n",
       "10242                5                    4     84000.0  10.91        35.9   \n",
       "\n",
       "       pub_rec_bankruptcies  repaid   total_pymnt  prediction  \n",
       "13202                   0.0       1  20932.049347           1  \n",
       "8230                    0.0       1   7622.612042           1  \n",
       "6112                    0.0       1   7508.402271           1  \n",
       "8850                    0.0       1   5581.772363           1  \n",
       "9933                    0.0       0    830.000000           1  \n",
       "...                     ...     ...           ...         ...  \n",
       "8010                    0.0       1  15739.033701           1  \n",
       "9098                    0.0       1   7369.203562           1  \n",
       "10246                   0.0       1  21448.111353           1  \n",
       "1899                    0.0       0   4019.590000           1  \n",
       "10242                   0.0       1   9804.321357           1  \n",
       "\n",
       "[3156 rows x 14 columns]"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio_rlc3_no_pbr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:2496, Annual return:0.03\n",
      "60 months loan:660, Annual return:0.0356\n"
     ]
    }
   ],
   "source": [
    "get_portfolio_annual_return(portfolio_rlc3_no_pbr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Impact of Loan Grade\n",
    "\n",
    "Loan grade is assigned by Lending Club based on loan and borrower's information. Higher grade loans have higher repaid rate. On the other hand, higher grader loans also have lower interest rate. Portfolio return is determined by both repaid rate and interest rate. As shown in following code cells, a portfolio with all grade A loans actually have lower annual return for both 36 months loans and 60 months loans comparing to the whole dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repaid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade_code</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.937641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.871558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.835576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.789301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.736402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.677778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.641509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              repaid\n",
       "grade_code          \n",
       "0           0.937641\n",
       "1           0.871558\n",
       "2           0.835576\n",
       "3           0.789301\n",
       "4           0.736402\n",
       "5           0.677778\n",
       "6           0.641509"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Higher grade loans have higher repaid rate\n",
    "df.groupby('grade_code').agg({'repaid':'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>int_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade_code</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.350978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.033439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.555241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15.707576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.653752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19.729463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>21.346981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             int_rate\n",
       "grade_code           \n",
       "0            7.350978\n",
       "1           11.033439\n",
       "2           13.555241\n",
       "3           15.707576\n",
       "4           17.653752\n",
       "5           19.729463\n",
       "6           21.346981"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Higher grade loans have lower interest rate\n",
    "df.groupby('grade_code').agg({'int_rate':'mean'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:1842, Annual return:0.0226\n",
      "60 months loan:76, Annual return:0.0225\n"
     ]
    }
   ],
   "source": [
    "#All grade A loans\n",
    "get_portfolio_annual_return(df_test[df_test.grade_code==0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Include Loan Grade in Training Features\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:2626, Annual return:0.029\n",
      "60 months loan:685, Annual return:0.0353\n"
     ]
    }
   ],
   "source": [
    "model_columns4=['funded_amnt', 'purpose_code', 'addr_state_code', 'home_ownership_code', 'annual_inc', \n",
    "                 'dti', 'revol_util', 'pub_rec_bankruptcies', 'loan_term_year','grade_code']\n",
    "d_train = df_train[model_columns4]\n",
    "d_test = df_test[model_columns4]\n",
    "reg_log2=LogisticRegression(class_weight='balanced')\n",
    "reg_log2=reg_log2.fit(d_train,l_train)\n",
    "pred4=reg_log2.predict(d_test)\n",
    "df_test['prediction'] = pred4\n",
    "portfolio_rlc4 = df_test[df_test.prediction==1]\n",
    "#return of the loan portfolio selected by rlc4\n",
    "get_portfolio_annual_return(portfolio_rlc4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:2492, Annual return:0.0301\n",
      "60 months loan:659, Annual return:0.0356\n"
     ]
    }
   ],
   "source": [
    "portfolio_rlc4_no_pbr=portfolio_rlc4[portfolio_rlc4.pub_rec_bankruptcies==0]\n",
    "get_portfolio_annual_return(portfolio_rlc4_no_pbr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  More Extreme class_weight\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:949, Annual return:0.0285\n",
      "60 months loan:142, Annual return:0.041\n"
     ]
    }
   ],
   "source": [
    "reg_log3=LogisticRegression(class_weight={0:0.9, 1:0.1})\n",
    "reg_log3=reg_log3.fit(d_train,l_train)\n",
    "pred5=reg_log3.predict(d_test)\n",
    "df_test['prediction'] = pred5\n",
    "portfolio_rlc5 = df_test[df_test.prediction==1]\n",
    "#return of the loan portfolio selected by rlc4\n",
    "get_portfolio_annual_return(portfolio_rlc5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:926, Annual return:0.0289\n",
      "60 months loan:138, Annual return:0.041\n"
     ]
    }
   ],
   "source": [
    "portfolio_rlc5=portfolio_rlc5[portfolio_rlc5.pub_rec_bankruptcies==0]\n",
    "get_portfolio_annual_return(portfolio_rlc5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>loan_term_year</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>grade_code</th>\n",
       "      <th>purpose_code</th>\n",
       "      <th>addr_state_code</th>\n",
       "      <th>home_ownership_code</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>repaid</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6112</th>\n",
       "      <td>7000</td>\n",
       "      <td>3</td>\n",
       "      <td>5.99</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>10.80</td>\n",
       "      <td>2.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7508.402271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7878</th>\n",
       "      <td>12000</td>\n",
       "      <td>5</td>\n",
       "      <td>8.49</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>108000.0</td>\n",
       "      <td>6.83</td>\n",
       "      <td>21.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14768.296274</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3610</th>\n",
       "      <td>5000</td>\n",
       "      <td>3</td>\n",
       "      <td>15.96</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>90000.0</td>\n",
       "      <td>13.29</td>\n",
       "      <td>34.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6280.721862</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12819</th>\n",
       "      <td>3000</td>\n",
       "      <td>3</td>\n",
       "      <td>11.12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>27600.0</td>\n",
       "      <td>15.35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2720.210000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11378</th>\n",
       "      <td>5000</td>\n",
       "      <td>3</td>\n",
       "      <td>6.17</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>24.54</td>\n",
       "      <td>35.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5462.605969</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11705</th>\n",
       "      <td>2400</td>\n",
       "      <td>3</td>\n",
       "      <td>9.25</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>11.52</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2757.763573</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9301</th>\n",
       "      <td>12000</td>\n",
       "      <td>3</td>\n",
       "      <td>7.66</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113000.0</td>\n",
       "      <td>11.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>12844.144365</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9098</th>\n",
       "      <td>6800</td>\n",
       "      <td>3</td>\n",
       "      <td>5.79</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>12.85</td>\n",
       "      <td>17.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7369.203562</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10246</th>\n",
       "      <td>20000</td>\n",
       "      <td>5</td>\n",
       "      <td>14.91</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>131000.0</td>\n",
       "      <td>17.93</td>\n",
       "      <td>27.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>21448.111353</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10242</th>\n",
       "      <td>9000</td>\n",
       "      <td>3</td>\n",
       "      <td>5.79</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>84000.0</td>\n",
       "      <td>10.91</td>\n",
       "      <td>35.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9804.321357</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1064 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       funded_amnt  loan_term_year  int_rate  grade_code  purpose_code  \\\n",
       "6112          7000               3      5.99           0             2   \n",
       "7878         12000               5      8.49           0             1   \n",
       "3610          5000               3     15.96           2             2   \n",
       "12819         3000               3     11.12           1             0   \n",
       "11378         5000               3      6.17           0             2   \n",
       "...            ...             ...       ...         ...           ...   \n",
       "11705         2400               3      9.25           1             2   \n",
       "9301         12000               3      7.66           0             2   \n",
       "9098          6800               3      5.79           0             2   \n",
       "10246        20000               5     14.91           3             2   \n",
       "10242         9000               3      5.79           0             2   \n",
       "\n",
       "       addr_state_code  home_ownership_code  annual_inc    dti  revol_util  \\\n",
       "6112                 5                    4     35000.0  10.80         2.9   \n",
       "7878                 1                    0    108000.0   6.83        21.4   \n",
       "3610                 0                    4     90000.0  13.29        34.9   \n",
       "12819                1                    4     27600.0  15.35         0.0   \n",
       "11378                0                    4     40000.0  24.54        35.3   \n",
       "...                ...                  ...         ...    ...         ...   \n",
       "11705                1                    4     30000.0  11.52         0.0   \n",
       "9301                 0                    0    113000.0  11.90         0.0   \n",
       "9098                 4                    4     45000.0  12.85        17.1   \n",
       "10246                4                    0    131000.0  17.93        27.5   \n",
       "10242                5                    4     84000.0  10.91        35.9   \n",
       "\n",
       "       pub_rec_bankruptcies  repaid   total_pymnt  prediction  \n",
       "6112                    0.0       1   7508.402271           1  \n",
       "7878                    0.0       1  14768.296274           1  \n",
       "3610                    0.0       1   6280.721862           1  \n",
       "12819                   0.0       0   2720.210000           1  \n",
       "11378                   0.0       1   5462.605969           1  \n",
       "...                     ...     ...           ...         ...  \n",
       "11705                   0.0       1   2757.763573           1  \n",
       "9301                    0.0       1  12844.144365           1  \n",
       "9098                    0.0       1   7369.203562           1  \n",
       "10246                   0.0       1  21448.111353           1  \n",
       "10242                   0.0       1   9804.321357           1  \n",
       "\n",
       "[1064 rows x 14 columns]"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio_rlc5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "### more weight given to 60 month loans and they have higher rates of interest hence their return increase."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Other Improvements\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    19908\n",
       "Name: acc_now_delinq, dtype: int64"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.acc_now_delinq.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60000.0    794\n",
       "50000.0    554\n",
       "40000.0    445\n",
       "45000.0    431\n",
       "75000.0    425\n",
       "          ... \n",
       "63344.0      1\n",
       "92604.0      1\n",
       "18008.0      1\n",
       "54492.0      1\n",
       "46072.0      1\n",
       "Name: annual_inc, Length: 2996, dtype: int64"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.annual_inc.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CA    7105\n",
       "NY    3817\n",
       "FL    2872\n",
       "TX    2734\n",
       "NJ    1855\n",
       "IL    1525\n",
       "Name: addr_state, dtype: int64"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.addr_state.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    7105\n",
       "4    3817\n",
       "1    2872\n",
       "5    2734\n",
       "3    1855\n",
       "2    1525\n",
       "Name: addr_state_code, dtype: int64"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loan_df.addr_state_code.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36 months loan:90, Annual return:0.0421\n",
      "60 months loan:51, Annual return:0.0524\n"
     ]
    }
   ],
   "source": [
    "portfolio_rlc5=portfolio_rlc5[portfolio_rlc5.int_rate>12.4]\n",
    "get_portfolio_annual_return(portfolio_rlc5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
